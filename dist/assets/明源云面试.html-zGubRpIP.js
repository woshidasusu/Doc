import{_ as i,o as l,c as e,d as n}from"./app-PjuKeMiB.js";const a={},s=n(`<h1 id="明源云面试" tabindex="-1"><a class="header-anchor" href="#明源云面试" aria-hidden="true">#</a> 明源云面试</h1><h3 id="一面" tabindex="-1"><a class="header-anchor" href="#一面" aria-hidden="true">#</a> 一面</h3><p>面试官超 nice，基本每一个我没回答上的知识点，他都会讲解一番答案</p><p>所以从 11 点面到了快 1 点，午饭都没得吃，最后吃泡面</p><ul><li><p>介绍下你项目里的微前端架构</p><ul><li>多个产品线是如何解决全局污染问题 <ul><li>答：MPA，各个产品线其实是多页应用，无需考虑全局污染问题</li><li>答：缺点就是应用切换时会有页面重载，用户体验差</li></ul></li><li>多个产品线如何进行数据共享 <ul><li>答：产品线间都是相互独立的，并没有需要共享数据的场景，顶多通过 url 进行通信</li></ul></li><li>多个产品线的登录状态如何共享 <ul><li>答：统一登录中心，利用 cookie</li></ul></li><li>有思考过其他微前端实现方案吗 <ul><li>答：最早之前的 iframe，目前比较流行的蚂蚁金服开源的 qiankun 微前端架构</li></ul></li><li>有思考过如果有其他三方产品线想接入时，该怎么做吗 <ul><li>答：只需到导航系统里注册路由即可</li></ul></li><li>有思考过其他产品线如果技术栈跟你们不一致，能否做到吗，数据共享方面呢 <ul><li>答：因为是 MPA 模式，所以天生支持技术栈无关，但数据无法共享</li></ul></li><li>面试官问完后给我科普了下微前端各方案 <ul><li>企业级微前端需要考虑技术栈无关 <ul><li>主框架需要实现路由系统 + 资源加载，具体则是当切换应用时，将子应用打包成 HTML 赛到主框架某个容器内。子应用的 HTML 内容需要去下载它的资源文件，css 文件等</li></ul></li><li>之前的微前端实现方案：iframe <ul><li>缺点：iframe 无法控制外部页面</li><li>优点：能解决局污染</li></ul></li><li>蚂蚁金服的 qiankun 开源架构 <ul><li>运行时组合 <ul><li>子应用单独构建，无需依赖主框架</li><li>主框架运行时，动态加载子应用资源</li><li>因为子应用可打包构建成 HTML 内容，包含 script 下载资源文件，和 link 下载样式文件，同时还有子应用的 SPA 入口组件</li><li>主框架在切换子应用时，动态将子应用打包生成的 HTML 内容赛到主框架的某个容器内</li></ul></li><li>样式隔离 <ul><li>因为子应用样式挂载在 link 标签上，主框架在切换子应用时会动态移除和填充子应用的 HMTL 内容，这样就可以实现当前时刻，只有一个应用的 CSSOM 生效</li></ul></li><li>JS 隔离 <ul><li>当主框架切换子应用时，它能够给 IIFE 实现沙箱环境</li></ul></li></ul></li><li>数据共享 <ul><li>SPA 下可借助 window 挂载</li></ul></li></ul></li></ul></li><li><p>项目里有遇到什么技术难点吗</p></li><li><p>都封装了哪些组件</p></li><li><p>有看过哪些开源的 UI 组件库吗</p></li><li><p>如果你的组件有涉及到业务逻辑，那么你们是怎么考虑封装组件的</p></li><li><p>如果某个组件一开始只有一种场景，但在后续的需求中，不断的新增了各种场景，那么你们是如何考虑改造这个组件</p></li><li><p>平常有做了哪些性能优化呢</p></li><li><p>首屏加载时长优化有哪些做法</p></li><li><p>常见的 webpack 优化有哪些</p><ul><li>提高打包速度 <ul><li>优化 loader 处理的范围，不需要进行 babel 转换的文件可以过滤掉，因为 babel 转换需要先生成 AST，再生成目标代码</li><li>使用 cache-loader 缓存</li><li>多线程进行，happypack，thread-loader</li><li>noParse 配置无需解析的三方库</li><li>DllPlguin 打包动态链接库，作为公共代码供其他使用，无需多次打包</li><li></li></ul></li><li>优化打包体积 <ul><li>image-webpack-loader 对图片进行压缩和优化，降低图片分辨率，压缩图片体积</li><li>purgecss-webpack-plguin 删除无用的 css 样式</li><li>add-asset-html-cdn-webpack-plugin 来以 cdn 方式加载资源，同时配置 externals 外部声明，跳过打包</li><li>无用代码剔除 tree-shaking</li><li>plugin-syntax-dynamic-plugin 动态加载 <ul><li>在路由上通过 webpackChunkName 声明 Chunk 名，然后 webpack 里的 output 配置相关 chunkFilename</li></ul></li><li>commonsChunkPlugin 提取公共代码</li></ul></li></ul></li><li><p>webpack 的 loader 和 plugins 有什么区别</p></li><li><p>那 plugins 都有哪些钩子可用，说说</p><ul><li>compiler 来查看都有哪些钩子</li><li>entryOption 在 entry 配置项处理过之后</li><li>afterPlugins 设置完初始插件之后</li><li>emit 生成资源到 output 目录之前</li></ul></li><li><p>平常有深入了解哪些 webpack 方面的知识吗</p><ul><li>面试官反复强调，做前端 webpack 哪能不了解</li></ul></li><li><p>移动端的物理像素和逻辑像素</p><ul><li>设备像素比 dpr = 设备像素 / CSS 像素，js 里可通过 window.devicePixelRatio 获取，css 里可通过 -webkit-min-device-pixel-ration 获取</li></ul></li><li><p>如何实现 CSS 里 1px 在移动端设备上能够呈现的就是 1px（移动端1px像素问题）</p><ul><li><p>媒体查询基于设备像素比进行缩放，设置小数像素（js 读取设备像素比再进行转换也可以）</p><ul><li><p>@media screen and (-webkit-min-device-pixel-ratio: 2) {</p><p>​ .border {border: 0.5px}</p><p>}</p></li><li><p>缺点，兼容性差，安卓设备不支持小数像素</p></li></ul></li><li><p>viewport + rem + js 动态修改缩放比</p><ul><li><div class="language-html line-numbers-mode" data-ext="html"><pre class="language-html"><code>&lt;meta name=&quot;viewport&quot; content=&quot;initial-scale=1, maximum-scale=1, minimun-scale=1, user-scalable=no&quot;&gt;
// 初始缩放，最大缩放，最小做法，是否允许用户手动缩放
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div></li><li><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>var viewport = document.querySelector(&quot;meta[name=viewport]&quot;)
if (window.devicePixelRatio == 1) {
    viewport.setAttribute(&#39;content&#39;, &#39;width=device-width, initial-scale=1, maximum-scale=1, minimum-scale=1, user-scalable=no&#39;)
} 
if (window.devicePixelRatio == 2) {
    viewport.setAttribute(&#39;content&#39;, &#39;width=device-width, initial-scale=0.5, maximum-scale=0.5, minimum-scale=0.5, user-scalable=no&#39;)
} 
if (window.devicePixelRatio == 3) {
    viewport.setAttribute(&#39;content&#39;, &#39;width=device-width, initial-scale=0.333333333, maximum-scale=0.333333333, minimum-scale=0.333333333, user-scalable=no&#39;)
} 
var docEl = document.documentElement;
var fontsize = 10 * (docEl.clientWidth / 320) + &#39;px&#39;;
docEl.style.fontSize = fontsize;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li><li><p>媒体查询 + transform: scale() 缩放</p><ul><li><div class="language-css line-numbers-mode" data-ext="css"><pre class="language-css"><code>@media only screen and (-webkit-min-device-pixel-ratio: 2.0) {
    .border-bottom::after {
        -webkit-transform: scaleY(0.5);
        transform: scaleY(0.5);
    }
}
/* 3倍屏 */
@media only screen and (-webkit-min-device-pixel-ratio: 3.0) {
    .border-bottom::after {
        -webkit-transform: scaleY(0.33);
        transform: scaleY(0.33);
    }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div></li></ul></li></ul></li><li><p>那 viewport 有了解吗，meta 里都有哪些属性可以设置</p><ul><li>将网页放在手机浏览器上一个虚拟的 viewport 视口中</li><li>width 设置宽度，可以具体值，也可以设置成 device-width</li><li>height 设置高度，可以具体值，也可以是 device-height</li><li>initial-scale 初始缩放比例</li><li>maximum-scale 最大比例</li><li>minimum-scale 最小比例</li><li>user-scalable 用户是否可手动缩放</li></ul></li><li><p>DOM 和 BOM 你怎么理解的</p></li><li><p>ES6 有用到哪些吗</p></li><li><p>let 和 const 转成 es5 里的 var 有看过吗</p></li><li><p>让你自己用 var 来实现，该怎么实现</p></li><li><p>let 的暂时性死区怎么实现</p></li><li><p>箭头函数有了解吗，内部 this 怎么理解（父级作用域）</p></li><li><p>有了解 vue 和 react 的框架吗，说说他们的特点</p></li><li><p>双向绑定原理讲讲</p></li><li><p>vue 的 data 为什么需要返回函数</p></li><li><p>那为什么 react 不需要返回函数</p></li><li><p>什么是闭包</p></li><li><p>为什么需要有闭包，应用场景是什么</p></li><li><p>什么是重绘，重排</p></li><li><p>哪些操作会触发重绘，哪些触发重排</p></li><li><p>如果有 1 万个元素需要插入界面，怎么做性能会比较好</p><ul><li>虚拟列表</li></ul></li><li><p>防抖和节流怎么实现</p></li><li><p>设计模式有了解吗，项目里使用过哪些</p></li><li><p>简单工厂你怎么实现，策略模式怎么实现</p></li><li><p>你们编程规范是怎么做的，借助了哪些工具吗</p></li><li><p>cookie 和 localStorage 的区别</p></li><li><p>localStorage 想要实现过期删除怎么做</p></li><li><p>为什么会有浅拷贝和深拷贝，应用场景有哪些</p></li><li><p>浅拷贝为什么拷贝前后的对象间还会互有影响</p></li><li><p>变量是存储在哪里</p></li><li><p>深拷贝实现方案有哪些</p><ul><li>除了递归还有其他方案吗（想问 JSON.strxxx）</li><li>JSON.xxx 序列化再反序列化的方案有什么缺点吗</li></ul></li><li><p>CSS 盒模型是什么</p></li><li><p>弹性布局有了解吗，都有哪些属性可用</p></li><li><p>HTTP 状态码 301,302 的区别，304 是什么</p></li><li><p>HTTP 的缓存有几种，命中过程是什么样的</p></li><li><p>职业规划</p></li><li><p>有了解什么新技术吗</p></li></ul>`,5),p=[s];function u(d,t){return l(),e("div",null,p)}const r=i(a,[["render",u],["__file","明源云面试.html.vue"]]);export{r as default};
