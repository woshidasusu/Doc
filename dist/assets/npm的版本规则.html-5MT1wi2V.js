import{_ as e,o as n,c as a,d as o}from"./app-xJrSpaa5.js";const t={},s=o(`<h1 id="npm" tabindex="-1"><a class="header-anchor" href="#npm" aria-hidden="true">#</a> npm</h1><h3 id="package-json-里依赖包的版本规则" tabindex="-1"><a class="header-anchor" href="#package-json-里依赖包的版本规则" aria-hidden="true">#</a> package.json 里依赖包的版本规则</h3><p>比如常见的：</p><div class="language-json line-numbers-mode" data-ext="json"><pre class="language-json"><code>{
    &quot;rxjs&quot;: &quot;~1.0.1&quot;,
    &quot;xxx&quot;: &quot;^2.0.1&quot;,
    &quot;xxx&quot;: &quot;3.0.1&quot;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>版本号其实是有意义的：</p><p><strong>主版本号.次版本号.修订号</strong></p><p><strong>Major.Minor.Patch</strong></p><p>主版本号：大版本迭代，通常指有不兼容的修改</p><p>次版本号：小版本迭代，通常指可兼容的增加功能，也可叫做兼容版本</p><p>修订号：紧急爹地，通常指刚改了一些BUG，也可叫做补丁版本</p><p>那么，不同的版本修饰符，有着不同的更新行为，如下：</p><ul><li><strong>^2.2.0</strong> 前缀是 <code>^</code> 表示不跨主版本的更新，即安装最新版 2.x.x</li><li><strong>~2.2.0</strong> 前缀是 <code>~</code> 表示不跨主.次版本的更新，即安装最新版 2.2.x</li><li><strong>&gt;=2.2.0</strong> 前缀是 <code>&gt;=</code> 表示版本不小于指定的都可安装当前最新版</li><li><strong>&lt;=2.2.0</strong> 前缀是 <code>&lt;=</code> 表示版本不大于指定的都可安装当前最新版</li><li><strong>1.2.0 - 2.2.0</strong> 表示在指定版本间的都可安装最新版</li></ul><h3 id="npm-锁定依赖的依赖版本" tabindex="-1"><a class="header-anchor" href="#npm-锁定依赖的依赖版本" aria-hidden="true">#</a> npm 锁定依赖的依赖版本</h3><p>锁定依赖的版本，就是直接使用具体版本号，不加修饰符</p><p>但如果依赖库里面的 package.json 里有使用了最优版本修饰符，如 <code>^</code>，<code>~</code>，那么，依赖的依赖包还是会安装新版的</p><p>如果想锁定依赖的依赖的版本，可以借助 <code>npm shrinkwrap</code> 命令</p><p>上面是 npm 5 执行的做法</p><p>如今的做法是利用 package.json.lock 文件，该文件在执行完 npm install 就会自动生成</p><p>package.json-lock 可以理解成保存了 node_module 的状态快照，这样不同机子安装的都会是一样</p><h3 id="npm-install-和-update-区别" tabindex="-1"><a class="header-anchor" href="#npm-install-和-update-区别" aria-hidden="true">#</a> npm install 和 update 区别</h3><p>当本地已安装过依赖包：</p><ul><li>install 不会再次更新包版本，update 会更新包版本</li><li></li></ul>`,22),d=[s];function i(l,r){return n(),a("div",null,d)}const c=e(t,[["render",i],["__file","npm的版本规则.html.vue"]]);export{c as default};
