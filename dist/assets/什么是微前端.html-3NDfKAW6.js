import{_ as i,o as a,c as e,d as p}from"./app-XVH6qKTA.js";const n={},r=p('<h1 id="什么是微前端" tabindex="-1"><a class="header-anchor" href="#什么是微前端" aria-hidden="true">#</a> 什么是微前端</h1><p>本篇想来聊一聊微前端，不会讲得很细，也不会讲到源码级别的解析，但会把我了解的微前端都讲一讲，可以算是一篇针对小白的扫盲文吧</p><p><em>（注：这篇是我三年前写的扔在草稿箱里的，最近整理时才发现，简单做了些补充就发出来了，有些内容可能已经有点过时了，毕竟微前端发展这么快，这两年又开源了一些新框架，不再是 qiankun 一家独大了）</em></p><p>读完本篇，你能了解到：</p><ul><li><strong>什么是微前端？</strong></li><li><strong>常见的微前端方案？</strong></li><li><strong>什么时候该用微前端，它用来解决什么问题？</strong></li><li><strong>如果我要将现有多个项目通过微前端来融合，需要做哪些事？</strong></li><li><strong>微前端具有哪些特性？</strong></li><li><strong>微前端为什么会拥有这些特性？（即框架内部做了些什么）</strong><ul><li>比如 qiankun 框架内部都做了些什么事？</li><li>比如 single-spa 框架是什么？import-html-entry 框架又是什么？</li></ul></li></ul><h2 id="什么是微前端-1" tabindex="-1"><a class="header-anchor" href="#什么是微前端-1" aria-hidden="true">#</a> 什么是微前端</h2><p>理解微前端，可以从两个角度来看，一个是用户角度，一个是开发角度。</p><p>从用户角度来看，他只需要跟一个应用打交道即可。</p><p>但从开发角度来看，服务用户的这个应用其实是个巨无霸，由多个不同业务的子应用、子产品融合而成。</p><p>简单来说就是，<strong>对外是单一应用形态，对内则是各个相互独立的子应用集合而成</strong>。那么，这种架构思想就是微前端思想。</p><p>比如美团 APP，对用户来说就是一个美团应用而已，但其实它内部包括了外卖、酒店、电影、打车等等业务独立的子应用。</p><p>再比如大多数的 B 端后台系统，如阿里云网站，包括了云服务器、域名、数据库、订单等各个子系统。</p><p>那么，什么是子应用？项目里的一个业务独立的目录算吗？</p><p>我们这里说的<strong>独立</strong>，其实是指<strong>物理上的独立</strong>，即：团队独立，代码独立，开发、构建、部署独立，并不是逻辑上的业务独立</p><p>比如上面举例的美团 APP，外卖业务、酒店业务两个独立的业务，自然是要交由两个不同团队去维护，他们之间甚至可能都从没交流过，这才算是独立的子产品，子应用</p><p>了解完微前端思想，接下去就来看看它的落地方案</p><h2 id="常见的微前端方案" tabindex="-1"><a class="header-anchor" href="#常见的微前端方案" aria-hidden="true">#</a> 常见的微前端方案</h2><p>微前端方案其实有很多种，比如说：</p><h3 id="app-容器化-webview-方案" tabindex="-1"><a class="header-anchor" href="#app-容器化-webview-方案" aria-hidden="true">#</a> <strong>APP 容器化(WebView)方案</strong></h3><p>这是一种非前端的方案，有了解过 Cordova 跨平台前端 APP 方案的，对这个应该就不陌生。</p><p>借助 APP 原生能力，每个子应用激活运行时，都重新拉起一个新的容器(WebView)来运行，有点类似于浏览器另起标签页方式。</p><p>但需要 Cordova 提供相关 API 来操纵原生能力，主应用才可以做到去管理各个子应用的能力，否则就只能 Cordova 层来充当主应用。</p><h3 id="iframe-方案" tabindex="-1"><a class="header-anchor" href="#iframe-方案" aria-hidden="true">#</a> <strong>iframe 方案</strong></h3><p>这种方案其实很早就在用了，比如某些学校的老旧教务系统，公司内部的老旧系统等。</p><p>在页面某块区域挂载一个 iframe 块，来加载当前处于激活运行状态的子应用。</p><h3 id="nginx-方案" tabindex="-1"><a class="header-anchor" href="#nginx-方案" aria-hidden="true">#</a> <strong>Nginx 方案</strong></h3><p>这也是一种挺常见的方案，因为实现成本简单。</p><p>借助 Nginx，解析不同路由时，反向代理到不同子应用站点上。</p><p>但这是一种去中心化的方案，意味着页面上公共的部分所有子应用都需要去实现或集成。</p><h3 id="npm-包方案" tabindex="-1"><a class="header-anchor" href="#npm-包方案" aria-hidden="true">#</a> <strong>npm 包方案</strong></h3><p>这是一种借助工程构建能力的方案，先把子应用打包成一个三方包，然后主应用以三方包来进行集成。</p><p>但这种本质上只是把代码隔离开了，构建、部署还是相互依赖。</p><h3 id="spa-方案-qiankun-single-spa-等-⭐️" tabindex="-1"><a class="header-anchor" href="#spa-方案-qiankun-single-spa-等-⭐️" aria-hidden="true">#</a> <strong>SPA 方案（qiankun, single-spa 等）</strong> ⭐️</h3><p>这是一种让应用保持有单页应用优势的同时，也能够集成其他子应用的方案。</p><p>网上常说的微前端大多都是指这种方案，因为上面其他几种微前端方案多多少少都有一些无法解决的局限性问题，比如 iframe 方案的路由丢失、弹窗遮罩问题，比如 Nginx 方案的页面切换时刷新的体验问题等等。</p><p>所以如何在单页应用里，把其他子应用集成进来，并且大家共享同一个运行时又能够不相互影响，这个就是微前端框架要做的事。</p><p>比如 single-spa 框架解决了如何根据路由来管理不同子应用的生命周期状态。</p><p>比如 qiankun 框架基于 single-spa 基础上，实现了子应用集成、子应用运行隔离等处理。</p><hr><p>总之，微前端方案有很多种，有用前端实现的、也有非前端实现的，有针对 PC 的、也有针对 APP 的，有适用于在线场景的、也有适用于离线场景的，而且每一种方案里也有很多热门的现成框架。</p><p>所以，有的时候，一些所谓的微前端最佳实践方案并不一定就是适用于你的实际项目背景的。</p><p>在实际开发中，往往抉择某个方案时，考虑的因素有很多（诉求、成本、资源、时间、技术、扩展、债务背景等），综合下来，只有性价比最优的方案，但这方案不一定是社区里的最佳实践方案，所以没必要人云亦云，清楚自己的诉求，选择适合自己的方案即可</p><h2 id="什么时候该用微前端-它用来解决什么问题" tabindex="-1"><a class="header-anchor" href="#什么时候该用微前端-它用来解决什么问题" aria-hidden="true">#</a> 什么时候该用微前端？它用来解决什么问题？</h2><p>当你会来问这个问题时，其实这也意味着你目前可能还不是很需要微前端来帮你解决问题。</p><p>通常会有几类场景比较需要使用到微前端：</p><ul><li><strong>多团队共同维护同个产品的场景（巨石应用场景）</strong></li><li><strong>技术栈繁杂的场景</strong></li><li><strong>部门合并，产品线合并的场景</strong></li></ul><p>多团队维护同个产品的起源往往都是因为业务发展过快，因为赚钱快，所以公司不断招人，人一多就会开始分团队，团队一分，那两波人就是相互独立的节奏了，业务、需求、发版等都是各自团队的节奏。</p><p>那么，如果这时候，大家还是在同一个项目仓库里开发，问题就会越来越大，因为耦合度太大了，相互间影响点太多了，这种场景其实也就是常说的<strong>巨石应用</strong>场景，巨石应用最大的问题就是，一个小小的改动，都需要重新构建、发布整个巨石应用。</p><p>这时候，就很需要用微前端思想来解决问题了，把巨石应用里这一个个业务模块独立成子应用出来交由不同团队独立去维护，但这个过程理应是要对用户无感的，所以对外还需要保持同个应用。那这不就是微前端思想。</p><p>另外，当产品越做越大时，总会有需要集成其他子产品的时候，或者是高层战略变化，部门合并、产品线合并的时候，也会出现需要融合多个现有产品的诉求</p><p>而这过程，往往就会产生技术栈繁杂的情况，因为前端技术发展实在是太快了，融合的各个产品有可能是老产品，也有可能是新产品，那么这横跨几年的项目，在技术栈方面很难做到统一的。</p><p>那么不同技术栈的集成，只能走微前端思想来进行。</p><p><em>（其实，对于开发来说，最理想的就是重构了，谁都不想承接债务项目，但重构成本大，又没有产出收益，很难说服高层领导同意）</em></p><hr><p>其实，更通俗一点来说的话，如果你的项目只有一个团队寥寥几人开发，那么这时候，往往还不需要去考虑微前端，因为微前端能给你带来的价值体现并不是很明显，顶多只能说是未来的潜在价值</p><p>但当你看着你的团队人数不断增加、开始划分产品线，划分团队管理，而且对外销售仍保持单一产品时，这时候，就可以考虑微前端了</p><p>为什么？因为如果不把各团队的产品线代码独立出去的话，你会发现，越来越容易发生事故了，因为不清楚哪个团队的哪次发布就会影响到你的产品功能。</p><p>这时候你会发现，工作上耗费太多精力在这些上面了，而且产品也越来越不稳定了。</p><p>所以，微前端用来解决的，其实是开发内部的问题，独立开发、部署来提高产品稳定性，降低事故风险，减少跨团队维护成本</p><p>所以，<strong>微前端大多时候都只是一个重要而不紧急的事情，就算不做，也不至于阻塞发展</strong></p><p>但如果是由于产品线的融合，微前端就是一个需求，就是一个重要且紧急的事项，不得不做，至于采用哪种方案，适用即可</p><h2 id="如果我要将现有多个项目通过微前端来融合-需要做哪些事" tabindex="-1"><a class="header-anchor" href="#如果我要将现有多个项目通过微前端来融合-需要做哪些事" aria-hidden="true">#</a> 如果我要将现有多个项目通过微前端来融合，需要做哪些事？</h2><h3 id="菜单融合" tabindex="-1"><a class="header-anchor" href="#菜单融合" aria-hidden="true">#</a> 菜单融合</h3><ul><li>所有子应用的菜单进行融合，不管进入哪个子应用，都是呈现一样的菜单数据</li><li>菜单的呈现可以交由主应用负责，避免各个子应用需要改造或集成</li><li>子应用需要提供隐藏它原先自带的菜单、导航栏等公共区域的能力，以便满足主应用集成和本地自己开发时的两种场景</li></ul><h3 id="账号权限数据打通" tabindex="-1"><a class="header-anchor" href="#账号权限数据打通" aria-hidden="true">#</a> 账号权限数据打通</h3><ul><li>一个账号可以访问所有的子应用系统，账号、权限等数据需要打通保持一致，即 token 打通</li><li>账号的登录行为、账号数据等可以交由主应用负责，再传给各个子应用使用即可</li><li>子应用发现 token 过期时，不能跳回原先自己的登录页，应该通知主应用跳转公共的登录页</li></ul><h3 id="主题统一" tabindex="-1"><a class="header-anchor" href="#主题统一" aria-hidden="true">#</a> 主题统一</h3><ul><li>如果支持多种主题风格切换，那么所有子应用都需要支持，做到同步切换主题</li></ul><h3 id="语言统一" tabindex="-1"><a class="header-anchor" href="#语言统一" aria-hidden="true">#</a> 语言统一</h3><ul><li>如果支持多种语言呈现，那么所有子应用都需要支持，做到同步切换语言</li></ul><h2 id="微前端具有哪些特性" tabindex="-1"><a class="header-anchor" href="#微前端具有哪些特性" aria-hidden="true">#</a> 微前端具有哪些特性？</h2><p>不同微前端方案所带来的特性也所有不同，从这一节开始，我们讲的内容都是针对 qiankun 这类 SPA 微前端方案来展开</p><p>所以，下面盗用 qiankun 官网的特性介绍（只截取了部分特性）：</p><ul><li>📱 <strong>技术栈无关</strong>，任意技术栈的应用均可使用/接入，不论是 React/Vue/Angular/JQuery 还是其他等框架。</li><li>💪 <strong>HTML Entry 接入方式</strong>，让你接入微应用像使用 iframe 一样简单。</li><li>🛡 <strong>样式隔离</strong>，确保微应用之间样式互相不干扰。</li><li>🧳 <strong>JS 沙箱</strong>，确保微应用之间全局变量/事件不冲突。</li></ul><p>看到这些特性，不清楚你们会不会跟我有同样的好奇：为什么它就能支持技术栈无关，是怎么做到的，等等。</p><p>所以下面就来简单说下，qiankun 的这个微前端框架为什么会具备以上这些特性，也就是，它内部是做了什么来支撑它具备上面这些特性</p><h2 id="微前端为什么会拥有这些特性-即框架内部做了些什么" tabindex="-1"><a class="header-anchor" href="#微前端为什么会拥有这些特性-即框架内部做了些什么" aria-hidden="true">#</a> 微前端为什么会拥有这些特性？（即框架内部做了些什么）</h2><p>![image-20220505231054017](/Users/suxq/Library/Application Support/typora-user-images/image-20220505231054017.png)</p><p>一个微前端项目的简单架构，底层都会是一个所谓的基座主框架，然后在它之上则是各个相互独立的具有完整生命周期的子应用</p><p>这些子应用之间要么是互斥状态，要么是非互斥状态，同一时刻可以同时有多个处于激活状态的子应用</p><p>但不管子应用间的关系是什么，每个子应用都是独立的，因此都有各自的生命周期、各自的路由系统</p><p>而谁来提供这些能力给他们呢，或者说谁来管理这些子应用的各种关系、各种生命周期、各种路由事件呢？</p><p>自然就是大家都依赖的基座主框架</p><p>而落到 SPA 单页应用里，就还需要多出一个处理：如何在运行期间隔离不同子应用，因为单页应用是不刷新页面共享运行时的</p><p>所以，明白了 qiankun 官网介绍的它所具备的这些特性了吧，归类一下，无非就是指子应用的集成和隔离，至于子应用的管理，qiankun 借助了 single-spa 框架来实现</p><p>概述一下，单页应用的微前端框架要做的事，其实就是：<strong>子应用的管理、集成、隔离</strong></p><p>有些产品还会有子应用间的通信场景，但通信这个不是必须的，就不打算怎么展开讲了，无非就是找一个第三方作为通信桥梁</p><p>下面以 qiankun 框架为例，来简单讲讲它在这三个方面都是怎么实现的：</p><h3 id="子应用的管理-single-spa" tabindex="-1"><a class="header-anchor" href="#子应用的管理-single-spa" aria-hidden="true">#</a> 子应用的管理（single-spa）</h3><p>子应用的管理其实就两个方面：</p><ul><li>生命周期</li><li>路由分发</li></ul><p>生命周期管理是因为同一时刻，总会有处于不同状态的子应用，比如这个被激活了，那个被卸载了等等</p><p>路由分发管理是由于大家都共享同一个标签页，共享同一个地址栏的导航事件，导航事件需要分发到合适的子应用去接管</p><p>所以，single-spa 框架内部其实也就是做了这两件事</p><p>通过重写路由相关的方法来进行路由分发，通过定义一系列子应用生命周期状态，根据不同路由事件和时机来触发子应用状态的变更</p><h4 id="路由分发管理" tabindex="-1"><a class="header-anchor" href="#路由分发管理" aria-hidden="true">#</a> 路由分发管理</h4><p>更详细一点来说的话，它重写相关路由监听事件的方法，把对原生路由事件的监听改写成了只是在它内部维护了一个带有当前子应用相关信息的事件回调，这样所有的子应用里对路由系统的监听其实都被拦截了，实际只是往基座主框架里注册了个回调事件</p><p>真正监听系统路由事件的，其实只有基座主应用</p><p>于是，这样就能够实现在合适的时机，去触发合适的子应用的路由回调事件，以此来达到路由分发管理的效果</p><h4 id="生命周期管理" tabindex="-1"><a class="header-anchor" href="#生命周期管理" aria-hidden="true">#</a> 生命周期管理</h4><p>在生命周期状态方面，single-spa 定义了多种状态，但归类下，无非就是：启动、激活、卸载这几种</p><p>如果有用过 qiankun 的是不是感觉很熟悉，因为 qiankun 就是用 single-spa 来做子应用的管理，而 single-spa 要求要接入的子应用需要对外暴露三个钩子：</p><ul><li>bootstrap</li><li>mount</li><li>unmount</li></ul><p>这其实也正是 qiankun 框架能够支持技术栈无关的原因，这个特性其实是 single-spa 框架的特性，因为它只是当子应用满足相应规则时调用了子应用的相应生命周期钩子函数，而这个函数实际的行为由各自子应用去实现</p><p>所以 vue 技术栈的可以用 vue 的挂载卸载方案，react 技术栈的用 react，大家负责各自的挂载、卸载实现，以此就实现了技术栈无关特性</p><h3 id="子应用的集成-import-html-entry" tabindex="-1"><a class="header-anchor" href="#子应用的集成-import-html-entry" aria-hidden="true">#</a> 子应用的集成（import-html-entry）</h3><p>微前端最大的价值就是子应用是独立的，独立仓库、独立开发、独立部署</p><p>这说明基座主框架的项目里是没有子应用资源的，那么就需要考虑：</p><ul><li>如何把这些子应用资源集成过来？</li><li>子应用资源该以什么样的形态集成进来以便基座主框架能够使用？</li></ul><p>第一个问题其实就是怎么去下载子应用的这些资源？</p><p>一种思路是子应用打包后需要生成资源清单，基座主应用拿到这份资源清单就能够知道该去下载哪些子应用资源。资源清单可以通过 webpack 的 stats-webpack-plugin 插件来生成 manifest.json 资源清单</p><p>另一种思路就是去解析子应用的入口文件 html 代码，从里面拿到各种资源清单后，再去下载。qiankun 就是用来 import-html-entry 框架来实现这种思路</p><p>import-html-entry 做的事其实也不复杂：</p><ul><li>先下载并读取到子应用的 html 代码内容</li><li>下载 html 里的外部资源，比如 link 标签，如果是样式文件，则用 style 标签包裹样式文件代码内容，再回填到 html 上</li><li>注释 html 里的 script 标签，如果是内部脚步，收集起来，如果是外部脚本链接，先下载再收集</li><li>对外提供 api 来触发所有收集起来的 script 脚本的执行</li></ul><p>经过 import-html-entry 处理后的 html 内容，包含了所有外部样式代码，并且注释了所有 script 标签代码，因此这份 html 内容可以直接被塞到基座主应用到某个元素标签内而不产生什么副作用，而 qiankun 激活子应用时，也正是这么做的</p><p>这个做法也正是 qiankun 所说的 HTML Entry 的接入方式，看张图你会更明白了：</p><p>// todo</p><h3 id="子应用的隔离-js-沙箱、样式隔离" tabindex="-1"><a class="header-anchor" href="#子应用的隔离-js-沙箱、样式隔离" aria-hidden="true">#</a> 子应用的隔离（js 沙箱、样式隔离）</h3><p>由于单页应用是不刷新页面的，意味着各个子应用以及基座主应用都是共享同一个运行时，共享运行时的浏览器各内核状态</p><p>所以，为了各个子应用间，或者主应用与子应用间不会造成相互影响，需要在三个方面做好隔离处理：</p><ul><li>样式</li><li>全局变量、全局对象</li><li>全局事件</li></ul><p>样式隔离场景比较好理解，毕竟 css 的作用域机制一直是个问题，单页应用时就会出现相互影响，而建议使用 css module 来进行相互隔离了，更何况现在时多个单页应用的集成场景</p><p>全局变量的隔离通常是指 window 变量，实际开发中，经常会往 window 上挂东西，在这种多子应用共享场景下就容易出问题</p><p>全局对象的隔离通常是指 document，history，console 等这些全局共享等对象，原因跟 window 类似，实际开发中，总会去重写</p><p>全局事件则是指 addEventListener，setTimeout，setInternal 这类注册全局回调事件，因为这些回调事件跟子应用生命周期不一致，不做好处理，容易出问题</p><h4 id="样式隔离" tabindex="-1"><a class="header-anchor" href="#样式隔离" aria-hidden="true">#</a> 样式隔离</h4><p>样式隔离有几种思路，比如 web-component，但这种方案弊端在于依赖的三方库不一定有兼容这种场景</p><p>比如 css module，css namespace，但这种需要对子应用改造较多，不过实现起来简单，因为就是约定规范</p><p>qiankun 用的是动态 style 标签方案，因为 style 标签的添加或移除都会触发 CSSOM 树的重新构建，那只有子应用激活时，把子应用的所有样式添加到 style 标签里，子应用卸载时，跟着移除 style 标签，就能做到 style 样式的生命周期控制，从而不影响其他子应用</p><p>再者，由于 qiankun 依赖了 import-html-entry 框架，经过这个框架处理后的 html 内容已经把所有的样式代码回填到 style 标签内，所以是一种天然支持动态 style 标签的方案了</p><h4 id="全局变量、全局对象隔离、全局事件隔离" tabindex="-1"><a class="header-anchor" href="#全局变量、全局对象隔离、全局事件隔离" aria-hidden="true">#</a> 全局变量、全局对象隔离、全局事件隔离</h4><p>这个场景的隔离，qiankun 就是真正自己实现的</p><p>样式隔离</p><ul><li>动态 style 标签 <ul><li>无法解决同时运行中的应用隔离（主应用与子应用）</li></ul></li><li>css namespace 或 css module</li></ul><p>Js 沙箱 - 解决 window 全局变量的影响</p><ul><li>快照沙箱</li><li>代理沙箱</li></ul><p>全局事件的隔离</p><ul><li>重写 addEventListener</li><li>document</li><li>history</li><li>setTimeout, setInternal</li></ul>',138),l=[r];function t(s,h){return a(),e("div",null,l)}const o=i(n,[["render",t],["__file","什么是微前端.html.vue"]]);export{o as default};
