import{_ as s,r,o as t,c as h,a as e,b as i,e as n,w as c,d as a}from"./app-fgtJnIYH.js";const p="/assets/git分支模型-Q5FHZ6DP.png",u={},o=a(`<h1 id="_202207面试准备" tabindex="-1"><a class="header-anchor" href="#_202207面试准备" aria-hidden="true">#</a> 202207面试准备</h1><p>[TOC]</p><h2 id="css" tabindex="-1"><a class="header-anchor" href="#css" aria-hidden="true">#</a> CSS</h2><h3 id="水平垂直剧中" tabindex="-1"><a class="header-anchor" href="#水平垂直剧中" aria-hidden="true">#</a> 水平垂直剧中</h3><ul><li>text-align 和 line-height</li><li>flex + just-content&amp;algin-items</li><li>absolute + transfrom</li></ul><h3 id="盒模型" tabindex="-1"><a class="header-anchor" href="#盒模型" aria-hidden="true">#</a> 盒模型</h3><ul><li>IE 盒模型</li></ul><p>content + padding + border</p><ul><li>标准盒模型</li></ul><p>content</p><p>可通过 box-sizing 切换</p><h2 id="javascript" tabindex="-1"><a class="header-anchor" href="#javascript" aria-hidden="true">#</a> JavaScript</h2><h3 id="typeof" tabindex="-1"><a class="header-anchor" href="#typeof" aria-hidden="true">#</a> typeof</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>typeof 1 === &#39;number&#39;
typeof &#39;1&#39; === &#39;string&#39;
typeof true === &#39;boolean&#39;
typeof null === &#39;object&#39;   // js 语言的历史 bug
typeof undefined === &#39;undefined&#39;
typeof {} === &#39;object&#39;
typeof Symbol(1) === &#39;symbol&#39;
typeof [] === &#39;object&#39;  // 无法区分数组
typeof function b(){} === &#39;function&#39;
typeof /aa/ === &#39;object&#39; // 无法区分枚举

// es6 中
typeof a;  // Uncaught ReferenceError: a is not defined
let a = 1
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="instanceof" tabindex="-1"><a class="header-anchor" href="#instanceof" aria-hidden="true">#</a> instanceof</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>[] instanceof Array // true
[] instanceof Object // true
[] instanceof Function // false
// 实例对象（左值）的原型链上是否某个节点 === 构造函数的原型（右值.prototype）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>模拟实现</p><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>function my_instanceof(obj, target) {
  var proto = Object.getPrototypeOf(obj);
  while(proto) {
    if (proto === target.prototype) {
      return true;
    }
    proto = Object.getPrototypeOf(proto);
  }
  return false;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="继承" tabindex="-1"><a class="header-anchor" href="#继承" aria-hidden="true">#</a> 继承</h3><ul><li>基于原型链的继承</li></ul><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 原型继承：直接修改子类构造函数的原型来实现的继承
function A() {}
function B() {}
// 子类构造函数的原型赋值为父类实例对象
B.prototype = new A();

// 缺点：构造函数无法传参
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>构造函数继承</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 构造函数继承：子类构造函数里调用父类构造函数来初始化
function A() {}
function B() {
  A.call(this);
}

// 缺点：继承不全，只继承了父类实例对象，没有继承父类实例对象本身的继承关系（父类原型链）
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>组合继承（原型和构造函数的组合）</li></ul><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 组合继承：基于原型链继承和构造函数继承两种方案的组合
function A() {}
function B() {
  A.call(this);
}
B.prototype = new A();

// 缺点：父类构造函数调用了两遍
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>寄生组合继承（寄生在空对象上 + 组合继承）</li></ul><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 寄生组合继承：寄生在新的空对象上 + 组合继承
function A() {}
function B() {
  A.call(this);
}
B.prototype = Object.create(A.prototype);

// class 语法的继承通过 babel 转为 es2015 代码时，就是这种继承方案
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="什么是闭包和使用场景" tabindex="-1"><a class="header-anchor" href="#什么是闭包和使用场景" aria-hidden="true">#</a> 什么是闭包和使用场景</h3><blockquote><p>MDN 解释：一个函数和对其周围状态（词法环境）的引用捆绑在一起的组合，称之为闭包</p></blockquote><p>常见用法：函数里返回一个内嵌函数</p><p>用途：封装、让外部通过闭包访问到函数内的作用域</p><p>注意事项：用不好容易造成内存泄露，因为闭包还有一个所有内嵌函数共享同一个闭包的特性</p><h2 id="网络" tabindex="-1"><a class="header-anchor" href="#网络" aria-hidden="true">#</a> 网络</h2><h3 id="浏览器输入-url-到页面显示的过程" tabindex="-1"><a class="header-anchor" href="#浏览器输入-url-到页面显示的过程" aria-hidden="true">#</a> 浏览器输入 url 到页面显示的过程</h3><p>整个过程大体上分为这几个步骤：</p><ul><li>url 解析</li><li>DNS 域名解析</li><li>TCP 连接</li><li>HTTP 请求</li><li>页面渲染</li><li>断开连接</li></ul><h3 id="dns-域名解析过程" tabindex="-1"><a class="header-anchor" href="#dns-域名解析过程" aria-hidden="true">#</a> dns 域名解析过程</h3><p>域名解析过程有两种方案：迭代查询、递归查询</p><p>DNS 域名服务器分为这几类：</p><ul><li>根 DNS 服务器</li><li>顶级 DNS 服务器</li><li>权威 DNS 服务器</li><li>本地 DNS 服务器</li></ul><p>解析过程：本机向本地 DNS 服务器查询，这过程通常是递归查询；本地 DNS 服务器向根（顶级、权威） DNS 服务器查询，这过程通常是迭代查询</p><h4 id="什么是迭代查询" tabindex="-1"><a class="header-anchor" href="#什么是迭代查询" aria-hidden="true">#</a> 什么是迭代查询</h4><p>A 找 B，B 不知道，但告诉 A 去找 C，于是 A 去找 C。这种叫做迭代查询</p><h4 id="什么是递归查询" tabindex="-1"><a class="header-anchor" href="#什么是递归查询" aria-hidden="true">#</a> 什么是递归查询</h4><p>A 找 B，B 不知道，但 B 自己去找 C，然后把结果告知 A。这种叫做递归查询</p><h4 id="迭代查询和递归查询的优缺点和适用场景" tabindex="-1"><a class="header-anchor" href="#迭代查询和递归查询的优缺点和适用场景" aria-hidden="true">#</a> 迭代查询和递归查询的优缺点和适用场景</h4><ul><li>递归查询</li></ul><p>缺点：查询过程中的节点需要保持连接、也需要缓存结果，因此会相对比较占用资源。因为查询路程越远，越上层的节点，需要缓存的结果越多。而且因为有缓存，可能会被 DNS 劫持攻击。</p><p>优点：因为结果缓存下来了，下一次查询就不用再走一遍，速度会快很多</p><p>适用场景：适合离本机比较近的节点的查询过程，通常是本机到本地 DNS 服务器的查询过程中</p><ul><li>迭代查询</li></ul><p>优点：不保持连接，也不缓存结果，资源占用少</p><p>缺点：可能下一次的查询，还需要再走一遍之前的查询过程，查询速度较慢</p><p>适用场景：适合离本机比较远的节点的查询过程，比如在向根 DNS 服务器的查询过程</p><h3 id="tcp-三次握手" tabindex="-1"><a class="header-anchor" href="#tcp-三次握手" aria-hidden="true">#</a> tcp 三次握手</h3><p><img src="https://camo.githubusercontent.com/2907478f17726b04602fc2263e8b3e7f3af8e9d821b053e36767fee2dd4dc434/68747470733a2f2f75706c6f61642d696d616765732e6a69616e7368752e696f2f75706c6f61645f696d616765732f323039353535302d643439646239313564333038633531382e706e67" alt=""></p><h4 id="为什么需要进行三次握手" tabindex="-1"><a class="header-anchor" href="#为什么需要进行三次握手" aria-hidden="true">#</a> 为什么需要进行三次握手</h4><p>因为双方都要确认对方支持双工通信，双工是指发送和接收</p><ul><li>第一次握手，服务端确认了客服端发送正常</li><li>第二次握手，客户端确认了服务端发送和接收都正常</li><li>第三次握手，服务端确认了客户端接收正常</li></ul><h3 id="tcp-为什么是可靠传输" tabindex="-1"><a class="header-anchor" href="#tcp-为什么是可靠传输" aria-hidden="true">#</a> tcp 为什么是可靠传输</h3><ul><li>通过序列号、确认应答（ACK）、超时重传确保数据有序、完整、可靠</li><li>通过流量控制来降低发送频率，减少丢包产生</li><li>通过拥塞控制来适应多变的网络</li></ul><h3 id="tcp-的流量控制" tabindex="-1"><a class="header-anchor" href="#tcp-的流量控制" aria-hidden="true">#</a> tcp 的流量控制</h3><p>流量控制是指：发送方会根据接收方的处理能力来调整自己的发送数量</p><p>具体是每个 ACK 报文上会携带了当前自己滑动窗口的剩余大小，这样发送方获取到这个信息后，就会调整自己发送的报文数量</p><p>当接收方滑动窗口剩余为 0 时，发送方会停止发送等待接收方处理，因为担心会有丢包收不到接收方的通知，发送方也会起一个定时任务查看接收方的窗口大小</p><h3 id="tcp-的拥塞控制" tabindex="-1"><a class="header-anchor" href="#tcp-的拥塞控制" aria-hidden="true">#</a> tcp 的拥塞控制</h3><p>拥塞控制是指：发送方会根据当前网络情况，来调整发送数量，以避免让网络更糟糕</p><p><img src="https://pic.leetcode-cn.com/1618208921-kuMbas-image.png" alt=""></p><p>包括四个操作：慢启动、拥塞避免、快重传、快恢复</p><h3 id="tcp-的队头阻塞问题" tabindex="-1"><a class="header-anchor" href="#tcp-的队头阻塞问题" aria-hidden="true">#</a> tcp 的队头阻塞问题</h3><p>接收方的接收窗口是按顺序接收的，如果前面的报文一直没收到，那么即使收到后面的报文，滑动窗口也不会往前走，这个就是 tcp 的队头阻塞问题</p><h3 id="http-如何解决无状态问题" tabindex="-1"><a class="header-anchor" href="#http-如何解决无状态问题" aria-hidden="true">#</a> http 如何解决无状态问题</h3><p>http 本身是无状态的，解决方案：</p><ul><li>session + Cookie｜token</li></ul><p>服务端会维护会话信息（session），只要客户端每次都能把这个 session 信息携带在每一条 http 请求上，服务端就能知道这条 http 请求所属的状态信息</p><h3 id="http-1-0-1-x-2-0-3-0" tabindex="-1"><a class="header-anchor" href="#http-1-0-1-x-2-0-3-0" aria-hidden="true">#</a> http 1.0，1.x，2.0，3.0</h3><ul><li>1.x</li></ul><p>keep-alive 默认为长连接</p><p>增强缓存能力（cache-control）</p><p>等等</p><ul><li>2.0</li></ul><p>二进制传输</p><p>多路复用：解决 1.x 的连接数量限制导致的阻塞问题</p><p>头部压缩：解决重复冗余的头部信息传输问题</p><p>服务端推送</p><ul><li>3.0</li></ul><p>基于 udp（quic）：解决 tcp 的队头阻塞问题</p><h4 id="http-2-0-的多路复用" tabindex="-1"><a class="header-anchor" href="#http-2-0-的多路复用" aria-hidden="true">#</a> http 2.0 的多路复用</h4><p><img src="https://segmentfault.com/img/bVvvaN" alt=""></p><p>多路复用：在一个 tcp 连接上，多路 http 消息同时工作</p><h4 id="为什么-http-1-x-不能实现多路复用" tabindex="-1"><a class="header-anchor" href="#为什么-http-1-x-不能实现多路复用" aria-hidden="true">#</a> 为什么 http 1.x 不能实现多路复用</h4><p>http 1.x 基于文本分割解析的协议</p><p>http 2.0 基于二进制帧的协议</p><p>基于文本的协议，传输和解析都只能按顺序进行，无法并行，因为文本本身有序，打乱了后谁也不知道原本顺序是什么了</p><p>基于二进制帧的协议，数据都被拆分成一个个帧，每个帧都有编号，解析时按编号组装就能还原数据顺序</p><h3 id="https-的密钥协商过程" tabindex="-1"><a class="header-anchor" href="#https-的密钥协商过程" aria-hidden="true">#</a> https 的密钥协商过程</h3><p>概述：用非对称加密协商出一个随机的对称加密密钥来进行对称加密传输</p><ol><li>客户端 =&gt; 服务端 <ul><li>支持的加密算法列表、密钥长度限制等</li></ul></li><li>服务端 =&gt; 客服端 <ul><li>选择的加密算法</li><li>数字证书、公钥等</li></ul></li><li>客户端 =&gt; 服务端 <ul><li>校验证书</li><li>生成随机密钥串并用公钥加密</li><li>告知启用随机密钥串进行对称加密了</li><li>尝试用随机密钥串加密之前握手的数据</li></ul></li><li>服务端 =&gt; 客户端 <ul><li>用私钥解密获取随机密钥串</li><li>用随机密钥串解密加密的数据</li><li>告知客户端一切试验 ok</li></ul></li></ol><h4 id="对称加密和非对称加密" tabindex="-1"><a class="header-anchor" href="#对称加密和非对称加密" aria-hidden="true">#</a> 对称加密和非对称加密</h4><p>对称加密指：加密和解密用的是同一个密钥，速度快，但容易泄露</p><p>非对称加密：加密通常用公钥，加密通常用私钥，速度慢，但不容易泄露</p><h2 id="安全" tabindex="-1"><a class="header-anchor" href="#安全" aria-hidden="true">#</a> 安全</h2><h3 id="xss-攻击" tabindex="-1"><a class="header-anchor" href="#xss-攻击" aria-hidden="true">#</a> xss 攻击</h3><p>跨站脚本攻击，这是一种针对前端漏洞的脚本注入攻击</p><p>常见的：反射型攻击、存储型攻击、DOM 型攻击</p><p>预防：输入、输出时做过滤、转译处理；内容安全策略（CSP），限制恶意脚本的执行</p><p>降低损害程度：cookie 等敏感信息做控制（httpOnly）</p><p>实际项目常见：v-html（关键词高亮的需求）</p><h3 id="csrf-攻击" tabindex="-1"><a class="header-anchor" href="#csrf-攻击" aria-hidden="true">#</a> csrf 攻击</h3><p>跨站请求伪造攻击，这是一种针对后端漏洞的攻击</p><p>利用用户已登录过的信息，伪造成正常用户去获取后端敏感信息</p><p>Cookie 的自动发送、Token 的劫持</p><p>预防：敏感操作二次确认、验证码</p><p>Cookie 的 SameSite</p><h2 id="浏览器" tabindex="-1"><a class="header-anchor" href="#浏览器" aria-hidden="true">#</a> 浏览器</h2><h3 id="路由导航" tabindex="-1"><a class="header-anchor" href="#路由导航" aria-hidden="true">#</a> 路由导航</h3><p>两种模式：hash，history</p><h4 id="hash" tabindex="-1"><a class="header-anchor" href="#hash" aria-hidden="true">#</a> hash</h4><p>形如：<code>https://xxxx/#/xxx</code> url 上携带 # 的，称为 hash 模式</p><p><code>#</code> 之后的内容变化不会触发请求，服务端就不会去响应，一些代理抓包工具也直接丢弃掉这些内容</p><p>这样 nginx 只需要配置域名访问的转发，前端需要自己去实现路由解析以及 404 场景</p><p>可通过 hash change 事件监听路由变化</p><h4 id="history" tabindex="-1"><a class="header-anchor" href="#history" aria-hidden="true">#</a> history</h4><p>形如：<code>https://xxxx/xxx</code> url 上没有携带 # 的，称为 history 模式</p><p>url 发生变化，都会触发新的请求</p><p>这样，nginx 需要配置所有的页面导航请求都转发到单页应用到入口文件，这样前端才能接管路由，如：</p><div class="language-nginx line-numbers-mode" data-ext="nginx"><pre class="language-nginx"><code>location / {
  try_files $uri $uri/ @router;
  index index.html index.htm;
}

location @router {
  rewrite ^.*$ /index.html break;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>可通过 popstate 事件监听路由变化</p><h4 id="如何劫持路由系统" tabindex="-1"><a class="header-anchor" href="#如何劫持路由系统" aria-hidden="true">#</a> 如何劫持路由系统</h4><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 1. 注册监听路由变化事件
window.addEventListener(&quot;hashchange&quot;, fn);
window.addEventListener(&quot;popstate&quot;, fn);

// 2. 重写操作路由的 api
window.history.pushState = fn;
window.history.replaceState = fn;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="常见的存储方式和使用场景" tabindex="-1"><a class="header-anchor" href="#常见的存储方式和使用场景" aria-hidden="true">#</a> 常见的存储方式和使用场景</h3><ul><li>Cookie：</li></ul><p>4k，前端很少需要去用到了，基本是前后端未分离项目后端用来存储身份信息等用途</p><ul><li>SessionStorage</li></ul><p>4M，页签级别生命周期，常用于需要在本次使用内根据入口页参数透传至各个页面内做相应服务的场景</p><ul><li>LocalStorage</li></ul><p>4M，持久化存储，需要注意容量不够时去做下清理操作，可以自行扩展支持过期机制</p><ul><li>IndexDb</li></ul><p>无限制存量，持久化存储，没用过不清楚场景，可能一些前端监控框架采集日志会用到</p><h3 id="协商缓存和强缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存和强缓存" aria-hidden="true">#</a> 协商缓存和强缓存</h3><p>强缓存：没有服务端参与，http 1.0 的 Expire，http 1.x 的 cache-control: max-age</p><p>协商缓存：服务端根据客户的传参决定缓存是否可用，cache-control: no-cache</p><p>if-Modified-Since 和 last-Modified</p><p>if-None-Match 和 ETag</p><h4 id="通常项目里是怎么设置资源的缓存配置的" tabindex="-1"><a class="header-anchor" href="#通常项目里是怎么设置资源的缓存配置的" aria-hidden="true">#</a> 通常项目里是怎么设置资源的缓存配置的</h4><ul><li><p>index.html 不设置缓存</p></li><li><p>项目代码打包后的 js，css 资源文件协商缓存</p></li><li><p>logo、三方库资源文件等长期不变的，可以设成强缓存</p></li></ul><h3 id="跨域问题和解决场景" tabindex="-1"><a class="header-anchor" href="#跨域问题和解决场景" aria-hidden="true">#</a> 跨域问题和解决场景</h3><h3 id="页面渲染流程" tabindex="-1"><a class="header-anchor" href="#页面渲染流程" aria-hidden="true">#</a> 页面渲染流程</h3><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/77972f24d69243bb93679f155f305095~tplv-k3u1fbpfcp-zoom-in-crop-mark:3024:0:0:0.awebp" alt=""></p><h3 id="重排-回流-和重绘" tabindex="-1"><a class="header-anchor" href="#重排-回流-和重绘" aria-hidden="true">#</a> 重排(回流)和重绘</h3><p>重排(reflow)：也有翻译成回流，指的是当页面布局、几何信息等发生变化时，需要触发重新去计算的过程</p><p>重绘(repaint)：指的是绘制元素渲染到页面上展示的计算过程</p><p>频繁的重排过程可能会导致性能问题</p><h4 id="哪些操作会触发重排和重绘" tabindex="-1"><a class="header-anchor" href="#哪些操作会触发重排和重绘" aria-hidden="true">#</a> 哪些操作会触发重排和重绘</h4><p>只要会导致页面的布局或几何信息发生变化的操作：</p><ul><li>添加、删除、移动元素</li><li>改变元素大小</li><li>窗口尺寸变化</li><li>等等</li></ul><p>由于重排的过程是异步队列更新，因此还有一些想要获取实时几何信息的读操作也会触发重排</p><ul><li>offsetTop、offsetLeft、offsetWidth、offsetHeight</li><li>scrollTop、scrollLeft、scrollWidth、scrollHeight</li><li>clientTop、clientLeft、clientWidth、clientHeight</li><li>getComputedStyle()</li><li>getBoundingClientRect()</li></ul><p>所以谨慎在循环中，反复调用上述的读操作，应该先缓存结果，再去循环</p><h4 id="如何检测是否频繁触发重排和重绘" tabindex="-1"><a class="header-anchor" href="#如何检测是否频繁触发重排和重绘" aria-hidden="true">#</a> 如何检测是否频繁触发重排和重绘</h4><p>借助浏览器开发者工具：</p><ul><li>Performance：采集一段时间内的性能数据（包括了重排、重绘），但可能不直观</li><li>Rendering -&gt; Paint flashing：触发重绘的元素会直接通过闪烁标识出来，非常直观</li></ul><h4 id="实际项目的优化场景" tabindex="-1"><a class="header-anchor" href="#实际项目的优化场景" aria-hidden="true">#</a> 实际项目的优化场景</h4><p>当界面有元素是有动画时，需要特别注意</p><p>尤其是动画的元素在动画过程中，还会影响到其他元素的几何信息时，这个就会导致动画过程中频繁重排</p>`,165),v={href:"https://chenjigeng.github.io/example/share/%E9%81%BF%E5%85%8D%E5%9B%9E%E6%B5%81%E9%87%8D%E7%BB%98/%E5%B0%86%E5%A4%8D%E6%9D%82%E5%8A%A8%E7%94%BB%E6%B5%AE%E5%8A%A8%E5%8C%96.html",target:"_blank",rel:"noopener noreferrer"},b=a('<p>如果开启了 Rendering/Paint flashing 工具，动画过程界面闪烁个不停，这其实意味着非常耗性能，尤其长列表如果还在滑动过程中的话，更卡</p><p>优化：让在做动画的元素不要影响到其他元素，简单处理就是绝对定位，将其脱离文档流，这样动画的元素即使它本身大小、位置发生变化，那么顶多重排的只是它自己这个元素，不会影响到其他元素上</p><h3 id="垃圾回收机制" tabindex="-1"><a class="header-anchor" href="#垃圾回收机制" aria-hidden="true">#</a> 垃圾回收机制</h3><p>标记清除法：从根节点出发，标记区分可达与不可达对象</p><p>内存碎片处理：划分 from 和 to 两个区域，当 from 清除垃圾后，把剩余的搬移至 to 区</p><p>新生区：生存短的对象</p><p>老生区：生存长的对象，经过几轮新生区的清除仍旧存活时，升级到老生区</p><h3 id="内存泄露场景和排查方案" tabindex="-1"><a class="header-anchor" href="#内存泄露场景和排查方案" aria-hidden="true">#</a> 内存泄露场景和排查方案</h3>',8),m={href:"https://juejin.cn/post/6844904048961781774",target:"_blank",rel:"noopener noreferrer"},f=a(`<h4 id="常见的内存泄露场景" tabindex="-1"><a class="header-anchor" href="#常见的内存泄露场景" aria-hidden="true">#</a> 常见的内存泄露场景</h4><ul><li>遗忘的定时器</li><li>使用不当的闭包</li><li>网络回调</li></ul><h4 id="怎么排查" tabindex="-1"><a class="header-anchor" href="#怎么排查" aria-hidden="true">#</a> 怎么排查</h4><p>借助浏览器的开发者工具：</p><ul><li>Memory -&gt; Heap Snapshop：抓取内存快照（多抓几次做对比）</li><li>Memory -&gt; Alloction instrumentation on timeline：抓取一段时间，内存分配情况</li><li>Memory -&gt; Alloction sampling：抓取一段时间内，触发内存分配的函数情况</li></ul><h2 id="手写" tabindex="-1"><a class="header-anchor" href="#手写" aria-hidden="true">#</a> 手写</h2><h3 id="手写-apply" tabindex="-1"><a class="header-anchor" href="#手写-apply" aria-hidden="true">#</a> 手写 apply</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 改变 this, 参数处理
function apply2(that, args) {
  if (that == null) {
    that = window;
  }
  if (typeof that !== &#39;object&#39;) {
    that = Object(that);
  }
  const fn = this;
  that.__fn__ = fn;
  const res = that.__fn__(...args);
  delete that.__fn__;
  return res;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-call" tabindex="-1"><a class="header-anchor" href="#手写-call" aria-hidden="true">#</a> 手写 call</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 改变 this，参数处理
function call2(that, ...args) {
  if (that == null) {
    that = window;
  }
  if (typeof that !== &#39;object&#39;) {
    that = Object(that);
  }
  const fn = this;
  that.__fn__ = fn;
  const res = that.__fn__(...args);
  delete that.__fn__;
  return res;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-bind" tabindex="-1"><a class="header-anchor" href="#手写-bind" aria-hidden="true">#</a> 手写 bind</h3><div class="language-JavaScript line-numbers-mode" data-ext="JavaScript"><pre class="language-JavaScript"><code>// 改变 this，返回新函数，处理新旧参数，区分被当作构造函数使用场景
function bind2(that, ...args) {
  const fn = this;
  return function F(...newArgs) {
    return this instanceof F ? new fn(...args, ...newArgs) : fn.apply(that, [...args, ...newArgs]);
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-new" tabindex="-1"><a class="header-anchor" href="#手写-new" aria-hidden="true">#</a> 手写 new</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 用 F 的原型创建新对象，作为 F 的 this 去调用 F
function new2(F, ...args) {
  const o = Object.create(F.prototype);
  const res = F.apply(o, args);
  return res ? res : o;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-debounce" tabindex="-1"><a class="header-anchor" href="#手写-debounce" aria-hidden="true">#</a> 手写 debounce</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 短时间内高频调用的函数只响应最后一次
function debounce(fn, delay = 0) {
  let timer = null;
  return function(...args) {
    if (timer) {
      clearTimeout(timer);
    }
    timer = setTimeout(() =&gt; {
    	fn(...args);
      timer = null;
    }, delay)
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-throttle" tabindex="-1"><a class="header-anchor" href="#手写-throttle" aria-hidden="true">#</a> 手写 throttle</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 短时间内高频调用的函数会按一定的频率响应
function throttle(fn, delay = 0) {
  let flag = null;
  return function(...args) {
    if (!flag) {
      flag = true;
      fn(...args);
      setTimeout(() =&gt; {
        flag = false;
      }, delay);
    }
  }
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-promise-简易版" tabindex="-1"><a class="header-anchor" href="#手写-promise-简易版" aria-hidden="true">#</a> 手写 promise（简易版）</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 三种状态（pending, fulfilled, rejected）
// pending 时缓存回调，否则直接执行
function MyPromise(fn) {
  this.fulfilledCallbacks = [];
  this.rejectedCallbacks = [];
  this.value = &#39;&#39;;
  this.state = &#39;pending&#39;;
  fn((value) =&gt; {
    this.value = value;
    this.state = &#39;fulfilled&#39;;
    this.fulfilledCallbacks.forEach(f =&gt; f(value));
  }, (err) =&gt; {
    this.value = err;
    this.state = &#39;rejected&#39;;
    this.rejectedCallbacks.forEach(f =&gt; f(err));
  });
}

MyPromise.prototype.then = function(onFulfilled = (v) =&gt; v, onRejected = e =&gt; e) {
  if (this.state === &#39;pending&#39;) {
    this.fulfilledCallbacks.push(onFulfilled);
    this.rejectedCallbacks.push(onRejected);
  } else if (this.state === &#39;fulfilled&#39;) {
    this.value = this.onFulfilled(this.value);
  } else if (this.state === &#39;rejected&#39;) {
    this.value = this.onRejected(this.value);
  }
  return this;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写深拷贝" tabindex="-1"><a class="header-anchor" href="#手写深拷贝" aria-hidden="true">#</a> 手写深拷贝</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 区分数组和对象、注意循环引用、只拷贝自身属性、for-in
function deepClone(obj, map = new Map()) {
  if (typeof obj !== &#39;object&#39;) {
    return obj;
  }
  if (map[obj]) {
    return map[obj];
  }
  let res = {};
  if (Array.isArray(obj)) {
    res = [];
  }
  map[obj] = res;
  for(const key in obj) {
    if (obj.hasOwnerProperty(key)) {
     	res[key] = deepClone(obj[key], map);
    }
  }
  return res;
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="手写-proxy-实现数据劫持" tabindex="-1"><a class="header-anchor" href="#手写-proxy-实现数据劫持" aria-hidden="true">#</a> 手写 proxy 实现数据劫持</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// Proxy, Relect，三个参数：target, property, receiver
function proxy2(obj) {
  return new Proxy(obj, {
    get: function(target, property, receiver) {
      // ...
      return Reflect.get(target, property, receiver);
    },
    set: function(target, property, value, receiver) {
      // ...
      return Refect.set(target, property, value, receiver);
    }
  });
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="算法" tabindex="-1"><a class="header-anchor" href="#算法" aria-hidden="true">#</a> 算法</h2>`,25),x=a(`<h3 id="快排" tabindex="-1"><a class="header-anchor" href="#快排" aria-hidden="true">#</a> 快排</h3><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 找基准元素，小于的放一边，大于等于的放一边。递归处理
function quickSort(arr) {
    if (arr.length &lt;= 1) {
        return arr;
    }
    var pivotIndex = Math.floot(arr.length / 2);
    var pivot = arr.splice(pivotIndex, 1)[0];
    var left = [];
    var right = [];
    for (var i = 0; i &lt; arr.length; i++) {
        if (arr[i] &lt; pivot) {
            left.push(arr[i]);
        } else {
            right.push(arr[i]);
        }
    }
    return quickSort(left).concat([pivot], quickSort(right));
}

</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="框架" tabindex="-1"><a class="header-anchor" href="#框架" aria-hidden="true">#</a> 框架</h2><h3 id="vue" tabindex="-1"><a class="header-anchor" href="#vue" aria-hidden="true">#</a> vue</h3><h4 id="双向绑定原理" tabindex="-1"><a class="header-anchor" href="#双向绑定原理" aria-hidden="true">#</a> 双向绑定原理</h4><h5 id="概述" tabindex="-1"><a class="header-anchor" href="#概述" aria-hidden="true">#</a> 概述</h5><p>通过数据劫持，在 getter 时收集依赖，在 setter 时派发更新，更新时通过虚拟树的 diff 算法，找出组件需要更新的那部分 dom 元素</p><h5 id="具体实现" tabindex="-1"><a class="header-anchor" href="#具体实现" aria-hidden="true">#</a> 具体实现</h5><p>一个 vue 组件里的响应式的数据基本上有这几种： props，computed，data，watch</p><p>其中，watch 数据的依赖是在组件 create 创建阶段就会被收集起来</p><p>其他的数据，只有当组件在 mounted 挂载时，触发了 render 函数，然后模板里有使用到相应数据，触发 getter，才会收集依赖</p><p>之所以会有这种区别，是因为，vue 内部的监听器是有两种类型的</p><p>一种是组件渲染的 watcher，这个是 vue 内部在挂载组件时，会自动创建的，一个组件只会有一个组件渲染 watcher（vm._wathcer 变量），这个 wathcer 是用来收集该组件监听的需要触发更新视图的这些数据依赖，没在模板上使用的数据是不会被作为依赖收集起来监听的</p><p>另一种是开发人员自行创建的监听器，比如在 watch 里声明的，比如通过全局函数 $watch</p><h5 id="getter-时收集依赖收集的都是什么" tabindex="-1"><a class="header-anchor" href="#getter-时收集依赖收集的都是什么" aria-hidden="true">#</a> getter 时收集依赖收集的都是什么</h5><p>vue 在创建响应式数据对象时，会对每个属性用闭包创建了一个 Dep 对象数据来存储依赖信息，也就是说，一个属性就是一个依赖，Watcher 收集的依赖就是收集每个属性的 Dep</p><p>然后这个 Dep 里会维护着监听当前这个属性的所有 watcher</p><p>当这个属性被修改时，触发了 setter，就会通过调用 Dep 的 update 方法，通知所有 watcher 来更新</p><h5 id="setter-去更新视图是怎么做的" tabindex="-1"><a class="header-anchor" href="#setter-去更新视图是怎么做的" aria-hidden="true">#</a> setter 去更新视图是怎么做的</h5><p>当响应式数据的属性被修改时，触发了 setter，内部会通过 Dep 的 update 方法通知所有 watcher 进行更新，不同类型的 watcher 的更新行为有所不同</p><p>对于开发人员创建的 watcher，在创建时，就需要传入对应的回调函数，所以怎么响应由开发人员自行实现，比如 watch 的 handler 函数</p><p>对于组件渲染 watcher，它在创建时绑定的回调行为是：</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>updateComponent = () =&gt; {
    vm._update(vm._render(), hydrating)
}
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>所以当数据更新时，会先调用 render 函数生成新的虚拟 Dom，然后 update 函数里，会通过 diff 算法比对新旧两颗虚拟 Dom 的差异，来生成那些视图更新操作</p><h5 id="diff-算法" tabindex="-1"><a class="header-anchor" href="#diff-算法" aria-hidden="true">#</a> diff 算法</h5><p>patch 过程主要分三种场景：</p><ul><li>旧节点是真实 Dom，新节点是虚拟 Dom，表示首次渲染</li><li>旧节点是虚拟 Dom，新节点为空，表示销毁</li><li>新旧节点都是虚拟 Dom，开始 diff <ul><li>同层比较，深度优先 <ul><li>节点相同的判断逻辑：key 相等且 tag 相等以及其他一些判断</li><li>同层两数组通过头尾指针来进行比较</li><li>等等</li></ul></li><li>新旧都有子节点的话，递归</li><li>旧无子节点，新有，插入子节点</li><li>旧有子节点，新无，删除子节点</li></ul></li></ul><h5 id="更新时是如何保证父组件重新渲染不导致子级重新渲染的" tabindex="-1"><a class="header-anchor" href="#更新时是如何保证父组件重新渲染不导致子级重新渲染的" aria-hidden="true">#</a> 更新时是如何保证父组件重新渲染不导致子级重新渲染的</h5><p>每个组件都有自己的一个 watcher，绑定了自己组件的 update 函数，因此当 setter 时，Dep 去通知 Watcher 更新，已经可以直接定位到具体需要更新的组件了</p><p>但至于是更新组件的哪一块 dom 元素，就还需要通过虚拟 Dom 的 diff 算法去计算得出</p><h5 id="异步更新队列是什么" tabindex="-1"><a class="header-anchor" href="#异步更新队列是什么" aria-hidden="true">#</a> 异步更新队列是什么</h5><p>为了避免重复的相同更新操作以及进行批量的 dom 操作，vue 内部采用的是异步更新队列方案</p><p>setter 调用时，依赖 Dep 去通知监听者 Watcher 进行更新时<code>watcher.update()</code>，Watcher 只是把当前更新操作入列操作而已 <code>queueWathcer(this)</code> ，并没有实际去更新，入列时还可以过滤掉重复的 watcher，然后通知下一帧时去清空队列 <code>nextTick(flushSchedulerQueue)</code>，清空队列时，会将队列里的 wathcer 取出来，调用它的 run 方法执行，run 方法又会去调用到内部的 get 方法来取数，get 方法里会去调用创建 watcher 时传进来的回调函数</p><h5 id="nexttick-是什么" tabindex="-1"><a class="header-anchor" href="#nexttick-是什么" aria-hidden="true">#</a> $nextTick 是什么</h5><p>异步更新队列的下一帧，因为 vue 的视图更新操作是通过异步更新队列方案的，具体实现异步的方式是通过多种方案降级，优先 Promise，ie 下会尝试 mutationobservable，继续尝试 setImmediate，实在不行，最后默认用 setTimeout</p><p>流程上，nextTick 会将回调函数 cb 放入一个全局的回调函数队列数组里 <code>callbacks.push(cb)</code>，然后调用 timerFunc 来触发清空队列</p><p>timerFunc 内部会根据浏览器支持清空来决定是使用 promise 还是 setTimeout 实现异步任务，异步任务回调里去清空回调函数队列 <code>flushCallbacks</code></p><h4 id="_3-0-为什么会推组合式-api" tabindex="-1"><a class="header-anchor" href="#_3-0-为什么会推组合式-api" aria-hidden="true">#</a> 3.0 为什么会推组合式 API</h4><h4 id="computed、methods、watch-区别" tabindex="-1"><a class="header-anchor" href="#computed、methods、watch-区别" aria-hidden="true">#</a> computed、methods、watch 区别</h4><h4 id="computed-计算属性的依赖收集是怎么处理的" tabindex="-1"><a class="header-anchor" href="#computed-计算属性的依赖收集是怎么处理的" aria-hidden="true">#</a> computed 计算属性的依赖收集是怎么处理的</h4><h3 id="vue-初始化流程" tabindex="-1"><a class="header-anchor" href="#vue-初始化流程" aria-hidden="true">#</a> vue 初始化流程</h3><ol><li>挂载 vue 实例对象的内部变量和函数</li><li>调用 <strong>beforeCreate</strong> 生命周期</li><li>生成响应式数据 <ul><li>props 数据直接调用 defineReactive 处理</li><li>computed ?</li><li>watch 数据直接创建一个 watcher 来监听</li><li>data 会通过 Observer 遍历属性来处理</li></ul></li><li>调用 <strong>created</strong> 生命周期</li><li>如果有 $el，则自动调用 $mount 来挂载组件</li><li>template 模板编译生成 render 函数</li><li>调用 <strong>beforeMount</strong> 生命周期</li><li>创建组件渲染 watcher，绑定并调用更新视图的 _update 方法</li><li>调用 render 函数生成虚拟树</li><li>通过 diff 算法更新视图</li><li>调用 <strong>mounted</strong> 生命周期</li></ol><h3 id="vue-set-内部原理" tabindex="-1"><a class="header-anchor" href="#vue-set-内部原理" aria-hidden="true">#</a> Vue.$set 内部原理</h3><ol><li>如果是数组，通过 splice 来修改数据</li><li>如果是对象 <ol><li>如果 key 值已存在，执行简单的赋值行为</li><li>否则通过 Object.definedProperty 劫持数据</li></ol></li></ol><h3 id="vue-内部对-object-definxxx-局限所做的支持" tabindex="-1"><a class="header-anchor" href="#vue-内部对-object-definxxx-局限所做的支持" aria-hidden="true">#</a> Vue 内部对 Object.definxxx 局限所做的支持</h3><p>数组方面</p><ul><li>重写相关 api</li></ul><p>动态属性方面</p><ul><li>$set</li></ul><h3 id="vite" tabindex="-1"><a class="header-anchor" href="#vite" aria-hidden="true">#</a> vite</h3><h4 id="原理是什么" tabindex="-1"><a class="header-anchor" href="#原理是什么" aria-hidden="true">#</a> 原理是什么</h4><h4 id="从-webpack-迁移到-vite-需要对项目做哪些改造" tabindex="-1"><a class="header-anchor" href="#从-webpack-迁移到-vite-需要对项目做哪些改造" aria-hidden="true">#</a> 从 webpack 迁移到 vite，需要对项目做哪些改造</h4><h4 id="迁移过程有哪些坑点" tabindex="-1"><a class="header-anchor" href="#迁移过程有哪些坑点" aria-hidden="true">#</a> 迁移过程有哪些坑点</h4><h4 id="用-vite-开发时-为什么首页打开页面会需要等待比较长的时间" tabindex="-1"><a class="header-anchor" href="#用-vite-开发时-为什么首页打开页面会需要等待比较长的时间" aria-hidden="true">#</a> 用 vite 开发时，为什么首页打开页面会需要等待比较长的时间</h4><h3 id="微前端" tabindex="-1"><a class="header-anchor" href="#微前端" aria-hidden="true">#</a> 微前端</h3><h4 id="什么是微前端-主要解决什么问题" tabindex="-1"><a class="header-anchor" href="#什么是微前端-主要解决什么问题" aria-hidden="true">#</a> 什么是微前端，主要解决什么问题</h4><h4 id="qiankun-框架做了什么" tabindex="-1"><a class="header-anchor" href="#qiankun-框架做了什么" aria-hidden="true">#</a> qiankun 框架做了什么</h4><h5 id="qiankun-是怎么集成-加载-子应用的" tabindex="-1"><a class="header-anchor" href="#qiankun-是怎么集成-加载-子应用的" aria-hidden="true">#</a> qiankun 是怎么集成（加载）子应用的</h5><h5 id="qiankun-是怎么隔离-css-的" tabindex="-1"><a class="header-anchor" href="#qiankun-是怎么隔离-css-的" aria-hidden="true">#</a> qiankun 是怎么隔离 css 的</h5><h5 id="分别讲讲-qiankun-隔离-js-的两种方案-快照、代理" tabindex="-1"><a class="header-anchor" href="#分别讲讲-qiankun-隔离-js-的两种方案-快照、代理" aria-hidden="true">#</a> 分别讲讲 qiankun 隔离 js 的两种方案：快照、代理</h5><h5 id="localstorage-冲突了怎么隔离、iconfont-呢" tabindex="-1"><a class="header-anchor" href="#localstorage-冲突了怎么隔离、iconfont-呢" aria-hidden="true">#</a> localStorage 冲突了怎么隔离、iconfont 呢</h5><h4 id="single-spa-框架做了什么" tabindex="-1"><a class="header-anchor" href="#single-spa-框架做了什么" aria-hidden="true">#</a> single-spa 框架做了什么</h4><h5 id="劫持路由系统" tabindex="-1"><a class="header-anchor" href="#劫持路由系统" aria-hidden="true">#</a> 劫持路由系统</h5><p>简单说就是：single-spa 劫持了路由系统相关 api。只有 single-spa 才是真正监听了系统的路由事件，这之后不管是谁再去监听路由事件，还是操作路由 api，实际上，都经过 single-spa 来控制</p><div class="language-javascript line-numbers-mode" data-ext="js"><pre class="language-javascript"><code>// 1. 注册监听路由变化事件
window.addEventListener(&quot;hashchange&quot;, urlReroute);
window.addEventListener(&quot;popstate&quot;, urlReroute);

// 2. 重写原生事件监听，如果发现是要监听 hashchange|popstate 事件，那么不让它监听，但把它的回调事件缓存起来
window.addEventListener = function (eventName, fn) {
    if (typeof fn === &quot;function&quot;) {
      // 如果是监听 popstate｜hashchange 事件，并且这个回调事件没有注册过，那么就放入缓存里
      //...
    }
    return originalAddEventListener.apply(this, arguments);
};
window.removeEventListener = function (eventName, listenerFn) {}

// 3. 重写操作路由的 api
window.history.pushState = patchedUpdateState();
window.history.replaceState = patchedUpdateState();
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="低代码" tabindex="-1"><a class="header-anchor" href="#低代码" aria-hidden="true">#</a> 低代码</h3><h4 id="什么是低代码框架-主要解决什么问题" tabindex="-1"><a class="header-anchor" href="#什么是低代码框架-主要解决什么问题" aria-hidden="true">#</a> 什么是低代码框架，主要解决什么问题</h4><p>其实就是把原本用代码来描述界面，转换成，用元数据来描述界面</p><p>因此低代码框架的核心之一就是制定元数据的各种规则，框架内部就是围绕着元数据去做各种工作，比如解析等</p><p>通过用元数据来描述界面，这样就可以尽可能少的依赖代码实现，只需要修改相应配置就能兑现需求，达到快速交付、快速发版的效果</p><h4 id="低代码框架的架构" tabindex="-1"><a class="header-anchor" href="#低代码框架的架构" aria-hidden="true">#</a> 低代码框架的架构</h4><p>有两种级别的架构，一种是应用级的低代码框架，一种是页面级的低代码框架</p><p>这里以页面级低代码框架为例</p><p>。。。</p><h4 id="如何设计元数据的规则" tabindex="-1"><a class="header-anchor" href="#如何设计元数据的规则" aria-hidden="true">#</a> 如何设计元数据的规则</h4><p>规则应该尽可能通用，基于这条原则，基本上可以分为两种：通用规则，特性规则</p><p>通用规则：所有组件都有的规则，比如宽度、事件绑定等</p><p>特性规则：一些组件特有的规则，比如多选框组是否支持多选</p><p>设计规则的角度可以从两大层面出发：ui 渲染方面，组件联动交互方面</p><p>ui 渲染方面，主要就是内置组件的积累了，实现上一一映射渲染就行了，而组件的封装上，主要是容器类组件比较复杂</p><p>组件联动方面，主要就是数据源取数、事件监听响应、条件表达式</p><h4 id="表单数据如何建模" tabindex="-1"><a class="header-anchor" href="#表单数据如何建模" aria-hidden="true">#</a> 表单数据如何建模</h4><p>表单页面需要对表单数据模型进行建模</p><p>两种思路：一种是由使用人员自己预先实现完，传进来，框架直接使用</p><p>一种则是框架内部自动建模，那自然就是基于表单组件绑定的表单字段 key 值来自动建模了</p><h4 id="如何扩展低代码框架的自定义能力" tabindex="-1"><a class="header-anchor" href="#如何扩展低代码框架的自定义能力" aria-hidden="true">#</a> 如何扩展低代码框架的自定义能力</h4><p>低代码框架的核心之一在于是否拥有自定义能力，让使用者自定义实现的能力</p><p>自定义组件的实现：具名作用域插槽实现</p><p>自定义组件联动交互实现：函数库的方案</p><h4 id="设计一个低代码平台使用的组件需要考虑什么" tabindex="-1"><a class="header-anchor" href="#设计一个低代码平台使用的组件需要考虑什么" aria-hidden="true">#</a> 设计一个低代码平台使用的组件需要考虑什么</h4><p>维护人员的维护成本、扩展能力</p><p>使用人员的上手成本，自定义能力</p><h3 id="前端监控系统" tabindex="-1"><a class="header-anchor" href="#前端监控系统" aria-hidden="true">#</a> 前端监控系统</h3><h4 id="监控系统的架构图" tabindex="-1"><a class="header-anchor" href="#监控系统的架构图" aria-hidden="true">#</a> 监控系统的架构图</h4><h4 id="日志如何收集-如何存储-如何上报" tabindex="-1"><a class="header-anchor" href="#日志如何收集-如何存储-如何上报" aria-hidden="true">#</a> 日志如何收集，如何存储，如何上报</h4><h4 id="监控平台的错误日志如何跟源码定位" tabindex="-1"><a class="header-anchor" href="#监控平台的错误日志如何跟源码定位" aria-hidden="true">#</a> 监控平台的错误日志如何跟源码定位</h4><h2 id="工程" tabindex="-1"><a class="header-anchor" href="#工程" aria-hidden="true">#</a> 工程</h2><h3 id="统一规范" tabindex="-1"><a class="header-anchor" href="#统一规范" aria-hidden="true">#</a> 统一规范</h3><ol><li>借助 <code>.eslintrc.js</code> <code>.prettierrc.js</code> 让 vs code 统一代码风格</li><li>借助 pre-commit 来自动检测提交的代码规范</li><li>走 mr 流程来进行 code review</li></ol><h3 id="git-分支模型" tabindex="-1"><a class="header-anchor" href="#git-分支模型" aria-hidden="true">#</a> git 分支模型</h3><p><img src="`+p+`" alt=""></p><h3 id="什么是-dev-ops" tabindex="-1"><a class="header-anchor" href="#什么是-dev-ops" aria-hidden="true">#</a> 什么是 Dev-Ops</h3><p>Dev-Ops：Development 和 Operations 的组合词</p><p>通俗解释就是：开发运维一体化</p><p>要实现这个，需要流程 + 系列平台工具辅助</p><h3 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack" aria-hidden="true">#</a> webpack</h3><p>webpack 是一个打包工具，通过指定入口文件作为输入，内部经过依赖图生成、Loader、Plugin 等转换为 chunk 输出指定文件</p><p>通常，从一个入口地址起，会把所有代码都打包进一个 chunk 里，默认输出 main.js 文件，但如果用到懒加载 <code>import()</code> 或者一些 plugin 插件，会额外输出其他 chunk 文件，没有配置的话，默认会是一个 id 命名，可以通过配置修改，也可以通过魔法注释 <code>/* webpackChunkName: &quot;xxx&quot; */</code> 来修改</p><h4 id="工作流程" tabindex="-1"><a class="header-anchor" href="#工作流程" aria-hidden="true">#</a> 工作流程</h4><ol><li>根据配置文件，进行<strong>初始化</strong>，并<strong>挂载插件</strong></li><li>从指定入口文件开始，调用匹配的 <strong>Loader</strong> 对其进行编译，并在合适时机通知 <strong>Plugin</strong> 执行，最后对获得的依赖模块重复此步骤</li><li>将编译后的代码生成一个个 chunk，并输出文件</li></ol><h4 id="loader-和-plugins" tabindex="-1"><a class="header-anchor" href="#loader-和-plugins" aria-hidden="true">#</a> loader 和 plugins</h4><ul><li><p>loader</p><p>用于处理指定文件的转换过程，链式传递，输入输出均为字符串</p></li><li><p>plugin</p><p>用于扩展 loader 的局限，监听整个打包过程，在相应生命周期去实现所需的工作</p></li></ul><h4 id="常用的-plugins" tabindex="-1"><a class="header-anchor" href="#常用的-plugins" aria-hidden="true">#</a> 常用的 plugins</h4><h4 id="常用的-loader" tabindex="-1"><a class="header-anchor" href="#常用的-loader" aria-hidden="true">#</a> 常用的 loader</h4><h4 id="打包拆分怎么做" tabindex="-1"><a class="header-anchor" href="#打包拆分怎么做" aria-hidden="true">#</a> 打包拆分怎么做</h4><p>webpack 拆分 chunk 有三种场景：</p><ul><li>多 entry 入口配置</li><li>代码里模块以动态方式引入 <code>import(xxx)</code></li><li>plugin 插件（splitChunks：抽离公共代码）</li></ul><p>注：可以打包时，可以使用 webpack-bundle-analyzer 插件来查看打包结果</p><p>splictChunks 有几种工作模式，由 chunks 配置控制:</p><div class="language-text line-numbers-mode" data-ext="text"><pre class="language-text"><code>chunks: &#39;initial | all | async(默认)&#39;
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><p>async：默认值，工作模式就是会将动态引入的模块生成单独的 chunk，如果有公用，刚好复用</p><p>initial：这个工作模式是，除了 async 模式的功能外，对于静态引入的模块，如果有公用时，才会提取出来。但静态和动态的不会共通</p><p>all：这个是推荐的模式，除了 async 模式的功能外，对于静态引入的模块，如果有公用时，才会提取出来，而且静态和动态的共通的</p><h4 id="执行-npm-run-xxx-发生了什么" tabindex="-1"><a class="header-anchor" href="#执行-npm-run-xxx-发生了什么" aria-hidden="true">#</a> 执行 npm run xxx 发生了什么</h4><ol><li><p>package.json 文件里的 script 块找到相应命令执行</p></li><li><p>接着去 node_modules 目录下的 .bin 目录找第一步命令的可执行文件来执行</p><p>node_modules 目录下的 .bin 目录会存放着 <code>npm install xxx</code> 安装指定包时，该包的 bin 目录下的可执行文件</p><p>可以简单理解成这里是局部变量环境</p><p>这也是为什么有时直接执行 script 块里的命令时，会报系统找不到指定命令的错误，但执行 npm run xxx 时却能正常运行</p></li><li><p>如果第 2 步没有找到，那么会去全局的 node_modules/.bin 目录下寻找</p><p>这里就对应着那些通过 <code>npm install -g xxx</code> 安装到全局的包</p></li><li><p>如果第 3 步也没有找到，则会去系统变量里寻找是否有这个命令</p></li></ol><h4 id="创建和发布-npm-组件包流程" tabindex="-1"><a class="header-anchor" href="#创建和发布-npm-组件包流程" aria-hidden="true">#</a> 创建和发布 npm 组件包流程</h4><ul><li>创建项目仓库</li><li>修改 package.json 配置（主要 name, version, main）</li><li>cnpm 命令登录、发布</li></ul><h2 id="综合" tabindex="-1"><a class="header-anchor" href="#综合" aria-hidden="true">#</a> 综合</h2><h3 id="自我介绍" tabindex="-1"><a class="header-anchor" href="#自我介绍" aria-hidden="true">#</a> 自我介绍</h3><h4 id="一二面" tabindex="-1"><a class="header-anchor" href="#一二面" aria-hidden="true">#</a> 一二面</h4><p>94 年的，17 年在福州大学、本科、计算机专业毕业，毕业至今从事过两家公司，一个是在厦门，一个是在深圳，目前人在深圳，（不过老家在泉州）（目前是离职状态）。</p><p>从事的都是 2B 的产品，产品形态涉及到了多端，web 后台、公众号、企业微信、跨平台的 app 都有涉及到</p><p>技术栈方面，主要是 vue 2 的框架，也自研过一些提效插件或工具</p><p>（最近一年当过新人入职导师，带过敏捷团队）</p><h5 id="提问" tabindex="-1"><a class="header-anchor" href="#提问" aria-hidden="true">#</a> 提问</h5><ul><li>能简单介绍下这次招聘的前端岗位所需要负责的产品形态和业务吗</li><li>前端团队的规模情况呢，技术栈方面呢</li></ul><h4 id="三面" tabindex="-1"><a class="header-anchor" href="#三面" aria-hidden="true">#</a> 三面</h4><p>94 年的，17 年在福州大学、本科、计算机专业毕业，毕业至今从事过两家公司，一个是在厦门，一个是在深圳，目前人在深圳，不过老家在泉州，目前是离职状态，预计7月底，8月初回老家。</p><p>从事的都是 2B 的产品</p><p>平时开发会比较在意效率和规范问题</p><p>所以也开发过一些提效插件或工具，然后也制定了一些 review 之类的规范</p><p>最近一年当过新人入职导师，带过敏捷团队</p><h5 id="提问-1" tabindex="-1"><a class="header-anchor" href="#提问-1" aria-hidden="true">#</a> 提问</h5><ul><li>能简单说下，你们对这个岗位的应聘者的要求或者期待是什么吗，比如说，你们希望应聘者具有哪些能力，能有哪些成果，或者有哪些挑战，能收获哪些成长呢</li></ul><h3 id="封装组件时需要考虑什么" tabindex="-1"><a class="header-anchor" href="#封装组件时需要考虑什么" aria-hidden="true">#</a> 封装组件时需要考虑什么</h3><p>单一职责，可扩展、抽象化以便尽可能的通用</p><h3 id="做成组件库时需要考虑什么" tabindex="-1"><a class="header-anchor" href="#做成组件库时需要考虑什么" aria-hidden="true">#</a> 做成组件库时需要考虑什么</h3><p>要求跟标准需要提升，比如需要单元测试用例，需要负责任 review 之类的</p><p>如何发版、更新、维护</p><p>支持按需引入，因此打包工具可以借助 rollup 来多文件打包</p><p>样式抽离，以便使用者进行覆盖</p><p>是否需要推广，如何推广、如何收集反馈，响应 bug</p><p>组件官网</p><h3 id="如何排查线上问题" tabindex="-1"><a class="header-anchor" href="#如何排查线上问题" aria-hidden="true">#</a> 如何排查线上问题</h3><p>思路：复现 -&gt; 排查定位 -&gt; 解决</p><p>只要能复现的问题，其实都不是问题</p><p>辅助复现：</p><ul><li>前端监控系统（采集用户行为日志，来复盘用户操作）</li><li>生成环境如何调试（走代理）</li></ul><p>假如已经能复现了，但代码还无法精确定位到哪一块时</p><p>排查定位：</p><ul><li>二分回退法（先排除是历史问题，还是近期引入问题）</li><li>二分代码调试法</li></ul><h4 id="举个实际例子" tabindex="-1"><a class="header-anchor" href="#举个实际例子" aria-hidden="true">#</a> 举个实际例子</h4><p>（实例应该没什么好讲的吧，为何对实例感兴趣呢）</p><p>因为很多棘手 bug，排查到最后发生大多都是因为业务逻辑问题导致的，业务场景太复杂，对于这类 bug，没有业务背景，讲不清楚的，对着代码都不一定能讲清楚</p><p>如果非要举实例，那只是举一些非业务逻辑类的棘手 bug 了，比如兼容性</p><p>我们有个 h5，在浏览器，在微信上，页面返回的行为都是正常的，但偏偏在企业微信上，需要连续返回两次才能正常退出页面（只有首页是这样）</p><p>这个问题毫无头绪，幸好能复现，那就是二分法了，一块一块代码的去注释，去打日志，来排查</p><p>最后发现是某个模块拦截了路由，使用了 next(to) 方式重载了当前页，因为它做了一些异步处理</p><p>然后就是去官方找解释，说是 next 只要有带参，都会有新的路由入栈，但我们路由是 hash 模式的，理论上路由一样，就不会产生新栈，而且测试效果也是这样的，偏偏就是在企业微信上时才会出现</p><p>最后，还是没有找到根因，只能怀疑是兼容性问题了，企业微信的浏览器内核可能不一样导致的，所以代码换种写法就好了</p><h3 id="带新人最重要的是什么" tabindex="-1"><a class="header-anchor" href="#带新人最重要的是什么" aria-hidden="true">#</a> 带新人最重要的是什么</h3><p>分阶段，前期引导新人快速融入团队、上手项目；后期协助新人规划成长计划</p><p>性格内向的，可以每次迭代分配任务时，安排与不同的同事协助的任务，这样可以帮助快速跟同事熟络</p><p>项目上手方面，一方面是沉淀好相应文档，二是安排各项目任务，让他在实战中去学习熟悉项目</p><h3 id="带团队最重要的是什么" tabindex="-1"><a class="header-anchor" href="#带团队最重要的是什么" aria-hidden="true">#</a> 带团队最重要的是什么</h3><p>全局观，要有全局的角度去把控进度、把控风险</p><p>比如每次迭代需求，不能只了解自己负责的，至少需要全局了解本次迭代所有需求，以便提前识别本次是否有比较难的需求，比较可能有风险的需求，好提前关注风险</p><p>沟通协作能力，如果遇到需要跨组、跨部门协作的需求，需求知道去找谁沟通、协作</p><p>风险把控，每日的晨会需要跟进进度，识别是否有风险，有问题及时暴露，再看怎么去解决，是要协调资源，还是向上反馈</p><h3 id="讲讲你做的那个跨平台离线-app-项目" tabindex="-1"><a class="header-anchor" href="#讲讲你做的那个跨平台离线-app-项目" aria-hidden="true">#</a> 讲讲你做的那个跨平台离线 app 项目</h3><p><strong>跨平台原理</strong>：原生 app 端通过启用一个 webview 来运行 h5 代码，达到跨平台的效果</p><p>其中，通过 Cordova 插件来作为中间层，抹平不同平台的差异</p><p><strong>离线 app 原理</strong>： h5 代码并不是在线部署的，而是直接集成到 app 里面，代码下载到用户手机设备上再去本地运行的</p><p>因此即使无网络，程序仍旧可运行，所以叫它离线 app</p><p>既然代码是在用户设备本地，因此需要有一种发版、更新机制来将新版代码下发到用户设备上</p><p>所以要自己实现一套热更新机制，其中比较重要的就是版本号，来判断是否需要更新，这里还需要依赖于 app 原生文件操作能力</p><p>另外，虽然代码离线了，但程序的功能要想也支持无网络运行，意味着数据不能依赖于接口调用</p><p>所以前端项目里还需要类似后端一样，加入数据库机制、数据库操作层、业务逻辑层来处理这些数据</p><p>另外，用户操作过程中，产生的业务数据也需要有一种机制来上传到服务端，比如增量表机制</p><p>同时，服务端到新数据也需要有一种机制，同步到用户本地数据上，可根据数据类型决定是增量下载更新还是全量下载覆盖更新</p><h3 id="讲讲你微前端方案的重构" tabindex="-1"><a class="header-anchor" href="#讲讲你微前端方案的重构" aria-hidden="true">#</a> 讲讲你微前端方案的重构</h3><p><strong>背景</strong>：我们有一个 app 产品，这个 app 项目里有多条产品线，由不同团队维护。大家的发版节奏、管理方式等都不太一样，但项目代码又都是耦合在一起的，导致经常容易出问题，你影响我，我影响你。于是才进行了微前端来解藕</p><p>微前端的特点就是各个子产品可以独立开发、独立发版，但对外又是一个统一的产品形态</p><p>对于 SPA 的微前端框架，比较热门的就是蚂蚁金服的 qiankun 框架，它的好处之一就是开箱即用，但对于业务复杂的场景来说，这个也是它的缺点，因为能够定制化途径太少</p><p>就比如 qiankun 内部是用了 import-html-entry 框架来加载子应用，但这个框架就不适用于加载离线代码</p><p>当然，我们没有选择采用 qinkkun 框架不止这一个原因，我们最后选择基于 single-spa 来自研</p><p>Single-spa 框架是微前端架构的基础，它内部其实就做了一件事：管理子应用</p><ul><li>具体实现是：劫持整个路由系统，然后定义了一系列子应用的生命周期，根据路由来激活、卸载不同子应用</li></ul><p>但 single-spa 不实现子应用的加载，也不实现子应用间的隔离，这些需要自己去实现</p><p>它只要求子应用需要暴露几个生命周期函数，包含挂载的方法，这其实也是微前端之所以能够支持框架无关特性的原因，因为 single-spa 只负责激活了子应用需要挂载时，去调用子应用提供的方法，至于怎么挂载，不同框架就自己各自去实现</p><h4 id="你们这个微前端自研过程你有参与吗-是什么角色" tabindex="-1"><a class="header-anchor" href="#你们这个微前端自研过程你有参与吗-是什么角色" aria-hidden="true">#</a> 你们这个微前端自研过程你有参与吗，是什么角色</h4><p>我没有参与，我进公司的时候就已经落地成功在使用了</p><p>不过我对它挺感兴趣的，于是去看了它的实现源码，找了当时参与的同事去了解他们当初设计时的考虑因素</p><p>最后自己梳理出来了这些</p><h3 id="设计模式五大原则" tabindex="-1"><a class="header-anchor" href="#设计模式五大原则" aria-hidden="true">#</a> 设计模式五大原则</h3><ul><li>开闭原则</li><li>单一职责</li><li>里式替换原则</li><li>依赖倒置原则</li><li>迪米特法则(最少认识)</li></ul><h3 id="app-跨平台框架" tabindex="-1"><a class="header-anchor" href="#app-跨平台框架" aria-hidden="true">#</a> app 跨平台框架</h3><h4 id="cordova-webview" tabindex="-1"><a class="header-anchor" href="#cordova-webview" aria-hidden="true">#</a> Cordova + webview</h4><p>原理：Cordova 作为中间层抹平不同平台的差异，向 js 提供 app 原生硬件能力，webview 作为渲染解析引擎，运行前端代码</p><p>缺点：</p><ul><li>需要有专门的原生开发团队来提供 app 原生的打包能力，Cordova 插件的能力（或者前端自己去找社区的开源库）</li><li>Webivew 局限性</li></ul><p>优点：</p><ul><li>原生开发团队与前端业务团队各司其职，原生开发团队专注基建开发，业务交由前端开发</li><li>一套前端代码，多端运行</li><li>代码支持热更新</li></ul><h4 id="flutter" tabindex="-1"><a class="header-anchor" href="#flutter" aria-hidden="true">#</a> flutter</h4><p>原理：单独一套跨平台 ui 框架，单独搞得 ui 组件渲染</p><p>缺点：</p><ul><li>需要依赖原生开发团队</li><li>跨平台语言非前端系，需要学习成本</li></ul><p>优点：</p><ul><li>渲染快，性能好</li></ul><h4 id="react-native" tabindex="-1"><a class="header-anchor" href="#react-native" aria-hidden="true">#</a> React Native</h4><p>原理：react 作为中间层，通过虚拟树 dom 来把 dom 组件视图映射到不同平台的原生组件系统上，来实现视图渲染的跨平台，另外通过在原生层面启用一个 js 运行环境来响应逻辑，并通过 <code>NativeModules</code> 来提供原生硬件能力</p><p>缺点：</p><ul><li>需要原生开发团队来提供 app 打包能力、硬件能力</li></ul><p>优点：</p><ul><li></li></ul><h4 id="uni-app" tabindex="-1"><a class="header-anchor" href="#uni-app" aria-hidden="true">#</a> uni-app</h4><p>应该说 uni-app 是跨平台生态框架，因为它包含了运行时的跨平台能力，开发时的跨平台能力、发布能力等</p><p>优点：</p><ul><li>甚至不需要原生团队，只依赖前端团队即可完成跨平台 app 的开发、发布</li></ul><h3 id="基建封装" tabindex="-1"><a class="header-anchor" href="#基建封装" aria-hidden="true">#</a> 基建封装</h3><h4 id="如何封装请求库" tabindex="-1"><a class="header-anchor" href="#如何封装请求库" aria-hidden="true">#</a> 如何封装请求库</h4><p>第一，肯定不是基于 xmlHttpRequest 封装，能不重复造轮子就不造轮子了，所以可以选择基于 axios 封装</p><p>第二，封装的目的自然是简化业务层的使用，抽离重复的代码封装</p><ul><li>自动请求参数的封装，如 token，账户等</li><li>通用的异常处理，如打印日志，弹 toast 等</li></ul><p>第三，结合项目背景的封装</p><ul><li>域名配置方案（前后端分离、前后端未分离）</li></ul><p>第四，结合业务的封装</p><ul><li>请求失败的重试</li><li>token 过期的重定向</li></ul><h4 id="如何封装-jssdk" tabindex="-1"><a class="header-anchor" href="#如何封装-jssdk" aria-hidden="true">#</a> 如何封装 jssdk</h4><p>封装的目的在于简化业务层的使用，业务层直接使用原生 jssdk 麻烦的点有：</p><ul><li>Jssdk 的鉴权</li><li>埋点日志</li></ul><h5 id="jssdk-的鉴权" tabindex="-1"><a class="header-anchor" href="#jssdk-的鉴权" aria-hidden="true">#</a> jssdk 的鉴权</h5><p>jssdk 要求页面发生变化都需要重新鉴权，鉴权需要的数据来自于后端，所以前端可以通过监听路由变化事件，比如在 afterEach 事件里，根据当前页面路由是否配置了需要使用 jssdk 的情况，内部自动发请求跟后端交互获取到数据去进行鉴权</p><h5 id="埋点日志" tabindex="-1"><a class="header-anchor" href="#埋点日志" aria-hidden="true">#</a> 埋点日志</h5><p>使用 proxy 和 Reflect 劫持 jssdk 的 api 访问情况，来进行埋点日志</p>`,245);function g(j,k){const d=r("ExternalLinkIcon"),l=r("RouterLink");return t(),h("div",null,[o,e("p",null,[i("实际例子："),e("a",v,[i("一个在做缩放和移动的动画元素，它的下面是个长列表，动画过程中会导致长列表的位置不断发生变化"),n(d)])]),b,e("p",null,[e("a",m,[i("js 内存泄漏场景、如何监控以及分析"),n(d)])]),f,e("p",null,[n(l,{to:"/%E9%9D%A2%E8%AF%95%E9%A2%98/%E7%AE%97%E6%B3%95/"},{default:c(()=>[i("LeetCode")]),_:1})]),x])}const y=s(u,[["render",g],["__file","index.html.vue"]]);export{y as default};
