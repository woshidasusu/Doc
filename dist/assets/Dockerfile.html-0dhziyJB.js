import{_ as i,r as d,o as c,c as s,a as e,b as r,e as a,d as o}from"./app-pwInIdNR.js";const t={},l=e("h1",{id:"dockerfile",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#dockerfile","aria-hidden":"true"},"#"),r(" Dockerfile")],-1),h=e("p",null,"参考资料：",-1),p={href:"https://docs.docker.com/engine/reference/builder/",target:"_blank",rel:"noopener noreferrer"},u={href:"https://yeasy.gitbooks.io/docker_practice/content/image/dockerfile/",target:"_blank",rel:"noopener noreferrer"},m=o(`<p>Dockerfile 是用来定制构建镜像，每一行命令就会创建一层容器存储层，有些命令可以写成一行命令就不要分开多行写</p><p>最后可以通过 <code>docker build .</code> 来进行基于这份文件构建镜像，但建议结合 docker-compose 使用，就不用自己执行 build 命令了</p><h2 id="示例" tabindex="-1"><a class="header-anchor" href="#示例" aria-hidden="true">#</a> 示例</h2><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>FROM nginx
COPY nginx.conf /etc/nginx/nginx.conf
EXPOSE 80
RUN echo &#39;&lt;h1&gt;Hello, Docker!&lt;/h1&gt;&#39; &gt; /usr/share/nginx/html/index.html
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="指令" tabindex="-1"><a class="header-anchor" href="#指令" aria-hidden="true">#</a> 指令</h2><h3 id="from" tabindex="-1"><a class="header-anchor" href="#from" aria-hidden="true">#</a> FROM</h3><p>指定基础镜像，在基础镜像上做定制</p><p>基础镜像可以是官方提供的最基础的镜像，也可以是自己或三方已经定制化过的镜像</p>`,8),_={href:"https://yeasy.gitbooks.io/docker_practice/content/image/build.html#from-%E6%8C%87%E5%AE%9A%E5%9F%BA%E7%A1%80%E9%95%9C%E5%83%8F",target:"_blank",rel:"noopener noreferrer"},k=o(`<h3 id="copy" tabindex="-1"><a class="header-anchor" href="#copy" aria-hidden="true">#</a> COPY</h3><p>将宿主机内的文件拷贝进镜像内</p><p>比如：</p><div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>COPY hom* /mydir/
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div></div></div><h3 id="expose" tabindex="-1"><a class="header-anchor" href="#expose" aria-hidden="true">#</a> EXPOSE</h3><p>声明容器提供的服务端口</p><p>注意，只是容器对外的端口，并不是宿主机对外的端口，如果需要，可以在启动时，配置宿主机和容器的端口映射</p><h3 id="run" tabindex="-1"><a class="header-anchor" href="#run" aria-hidden="true">#</a> RUN</h3><p>执行命令行命令，当有多个命令需要执行时，可借助 <code>\\ &amp;&amp;</code> 来拼成一条命令，避免使用多个 RUN，因为每一行命令都会创建一层存储层，层次是有限制的</p>`,9),f={href:"https://yeasy.gitbooks.io/docker_practice/content/image/build.html#run-%E6%89%A7%E8%A1%8C%E5%91%BD%E4%BB%A4",target:"_blank",rel:"noopener noreferrer"},b=o(`<div class="language-docker line-numbers-mode" data-ext="docker"><pre class="language-docker"><code>RUN echo &#39;hello&#39; \\
    &amp;&amp; echo &#39;docker&#39; \\
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div></div></div>`,1);function g(v,x){const n=d("ExternalLinkIcon");return c(),s("div",null,[l,h,e("ul",null,[e("li",null,[e("a",p,[r("官方文档"),a(n)])]),e("li",null,[e("a",u,[r("Dockerfile 指令详解"),a(n)])])]),m,e("p",null,[e("a",_,[r("比如：nginx，jenkins，postgres，alpine（轻型 linux）"),a(n)])]),k,e("p",null,[e("a",f,[r("比如"),a(n)]),r("：")]),b])}const y=i(t,[["render",g],["__file","Dockerfile.html.vue"]]);export{y as default};
