import{_ as e,o as i,c as a,d as n}from"./app-dV2aVdq6.js";const s={},d=n(`<p>这次打算写几篇关于脚本方面的博客，主要是记录一下 Gradle 脚本和批处理脚本的一些写法，方便后续查阅。</p><h1 id="前言" tabindex="-1"><a class="header-anchor" href="#前言" aria-hidden="true">#</a> 前言</h1><p>平常开发过程中，一些较为重复的手工性工作，如果能让脚本来帮忙处理，自然是最好的，刚好之前有些工作有点过于重复且都是手工性去完成，所以就想着能否写个脚本来处理。</p><p>因为我还是用的 windows 开发，所以最开始想到的就是批处理脚本，但写完后发现，重复性工作是可以交给脚本去处理了，但每次要执行这个脚本文件还得打开脚本所在的文件夹找到脚本点击去执行。</p><p>emmm，因为我是开发 Android 的，电脑开机时 Android Stuido 就没关闭过，然后又想到 Gradle 的脚本可以直接通过 AS 来点击执行，这样一来，执行脚本，也就是敲代码过程中随手一个快捷键就搞定，简单、方便。</p><p>所以，就稍微来记录下批处理脚本和 Gradle 脚本的一些写法，内容偏基础简单，因为我的需求就是执行 java 命令来对某个文件夹下的 apk 文件分别进行签名，而后输出新的命名方式的 apk 文件。</p><p>所以，脚本涉及到的操作也就只是文件夹的遍历、字符串的处理、命令的执行这几个方面而已，后续有新接触再慢慢补充。</p><h1 id="批处理脚本" tabindex="-1"><a class="header-anchor" href="#批处理脚本" aria-hidden="true">#</a> 批处理脚本</h1><h3 id="_1-遍历指定文件夹下的文件" tabindex="-1"><a class="header-anchor" href="#_1-遍历指定文件夹下的文件" aria-hidden="true">#</a> 1. 遍历指定文件夹下的文件</h3><h5 id="_1-1-命令解释" tabindex="-1"><a class="header-anchor" href="#_1-1-命令解释" aria-hidden="true">#</a> 1.1 命令解释</h5><p><strong>命令： <code>for [参数] %%变量名 in （匹配符） do （执行的命令）</code></strong></p><p><strong>切记：每个指令之间必须以空格隔开，in 与 ( 之间有空格，do 与 （ 间也有空格，否则命令会无法成功执行</strong></p><p><strong>ps</strong>：本节只讲用批处理脚本执行 for 命令遍历文件夹的场景，因此以下分析每个指令意义时，不介绍其他含义</p><p><strong>[]</strong>：表示此项指令为可选</p><p><strong>[参数]</strong>：参数取值一共有四种： <code>/d, /r, /l, /f</code>，加上无参数，所以一共五种场景</p><ul><li>无参：遍历当前路径的文件夹下的文件，但也可在<code>(匹配符)</code>中指定路径</li><li>/d：遍历当前路径的文件夹下的文件夹，但也可在<code>(匹配符)</code>中指定路径</li><li>/r [路径]：深度遍历指定路径下的所有文件，子目录中的文件也会被遍历到，如果没指定路径，默认当前路径</li><li>/l ：当使用参数 /l 时，需结合<code>(匹配符)</code>一起使用，此时 <code>()</code> 括号内部的用法规则为：<code>(start, step, end)</code>，此时的 for 命令作用等同于 java 语言中的 for 语句</li><li>/f ：用于解析文件中的内容，本节不做介绍</li></ul><p><strong>%%变量名</strong>：作用类似于 <code>for(int i = 0; ; )</code> 中的 <code>int i = 0</code>，有些区别点的就是，批处理的 for 循环遍历每一个子项时，<code>%%变量名</code> &lt;=&gt; 每个子项，即 <code>&amp;&amp;变量名</code> 已经是指向具体的每个子项了</p><p><strong>（匹配符）</strong>：在 in 指令之后 () 括号里的内容可表示为通配符，用于按照指定的规则过滤文件夹下的文件，如 (*.txt) 表示遍历文件夹内所有以 .txt 结尾的文件</p><p><strong>(执行的命令)</strong>：前面的指令就可以取到文件夹内指定的每个子项了，那么接下去要对每个子项如何操作，就在这里写，类似于 java 的 for 命令后的 {} 大括号的作用</p><h5 id="_1-2-使用示例" tabindex="-1"><a class="header-anchor" href="#_1-2-使用示例" aria-hidden="true">#</a> 1.2 使用示例</h5><p><img src="https://upload-images.jianshu.io/upload_images/1924341-eca5e174e22b8170.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="当前目录.png"></p><p>以下示例基于上图中的文件路径，批处理脚本为 test.bat</p><ul><li>无参：<code>for %%i in (*) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-6f5d5efdef6356b4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for无参命令示例.png"></p><p>效果：遍历当前目录下的所有文件</p><ul><li>无参指定路径：<code>for %%i in (c:\\softwares\\VisualBat\\*.url) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-1ff92bc4da9354d4.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for无参指定路径命令示例.png"></p><p>效果：遍历在<code>(匹配符)</code>中指定路径下的以 .url 结尾的文件</p><ul><li>带参数 /d：<code>for /d %%i in (*) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-1a992c48a8a357e5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for参数d命令示例.png"></p><p>效果：遍历当前目录下所有的文件夹</p><ul><li>带参数 /d 指定路径：<code>for /d %%i in (c:\\softwares\\VisualBat\\*) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-b4b2cda8fd31b14f.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for参数d指定路径命令示例.png"></p><p>效果：遍历指定目录下的所有文件夹，%%i 指向每个子文件夹的绝对路径</p><ul><li>带参数 /r ：<code>for /r %%i in (*.url) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-b829be8b50aed33c.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for参数r命令示例.png"></p><p>效果：深度遍历当前路径下所有以 .url 结尾的文件，因为是深度遍历，因此 %%i 指向文件的绝对路径</p><ul><li><p>带参数 /r 指定路径：<code>for /r c:\\softwares\\VisualBat\\ %%i in (*.url) do ( echo %%i )</code></p><p>效果：同上图</p></li><li><p>带参数 /l ：<code>for /l %%i in (1, 1, 5) do ( echo %%i )</code></p></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-dce7e6c8948d1893.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for参数l命令示例.png"></p><p>效果：等效于 java 中的 <code>for (int i = 1; i &lt;= 5; i++)</code>语句，起始值，递增或递减，终止值都可自行设置</p><ul><li>带参数 /d /r：<code>for /d /r %%i in (*) do ( echo %%i )</code></li></ul><p><img src="https://upload-images.jianshu.io/upload_images/1924341-bc68f937b6a38e91.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="for参数dr命令示例.png"></p><p>效果：参数可结合使用，/d 表示遍历文件夹，/r 表示深度遍历，因此以上命令作用为深度遍历当前目录下的所有文件夹，包括子目录中的文件夹</p><h3 id="_2-临时变量的使用" tabindex="-1"><a class="header-anchor" href="#_2-临时变量的使用" aria-hidden="true">#</a> 2. 临时变量的使用</h3><h5 id="_2-1-变量的基本用法" tabindex="-1"><a class="header-anchor" href="#_2-1-变量的基本用法" aria-hidden="true">#</a> 2.1 变量的基本用法</h5><p><strong>命令：<code>set key=value</code></strong></p><p><strong>切记：<code>key=value</code> 三者之间绝对不能出现空格，不能为了像遵守 java 风格擅自给添加上空格，这与 java 的 <code>int a = 1</code> 声明变量不同，切记</strong></p><p><strong>变量使用：%key%</strong></p><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
set name=dasuAndroidTv
echo %name%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-3a3e2d4136a0a3b8.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="set命令示例.png"></p><p>效果：name 可当做临时变量使用，使用时需用 %% 将变量名括起来使用</p><p><strong>局限</strong>：不允许在 for 命令中类似上步中声明变量并直接使用，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
for /l %%i in (0,1,5) do (
    set name=dasuAndroidTv
    echo %name%
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-50009febcf368685.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="set命令示例2.png"></p><p>效果：在 for 命令中声明临时变量，并直接通过 %key% 方式使用时会出现上图中的错误：ECHO 处于关闭状态，但如果 <code>set key=value</code> 临时变量的声明是放在 for 命令外部，for 命令内部只是使用的话，是可以的，如下：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
set name=dasuAndroidTv
for /l %%i in (0,1,5) do (
    echo %name%
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-29cdda5c69c0f7ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="set命令示例3.png"></p><p>效果：在 for 命令外部声明临时变量，for 命令内部只是使用，这种方式是允许的</p><h5 id="_2-2-变量在-for-命令中的用法" tabindex="-1"><a class="header-anchor" href="#_2-2-变量在-for-命令中的用法" aria-hidden="true">#</a> 2.2 变量在 for 命令中的用法</h5><p><strong>提问：那么如果要在 for 命令中才声明临时变量，并使用的话，该如何做？</strong></p><p><strong>for 命令中临时变量的使用：</strong></p><ol><li><strong>需启用变量延迟功能，命令：<code>setlocal enabledelayedexpansion</code></strong></li><li><strong>for 命令中的临时变量使用时用 <code>!key!</code> 感汉号括起来的形式代替 <code>%key%</code></strong></li><li>理由：不清楚，google 来的解决方案，感兴趣想深入研究的自行搜索</li></ol><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
setlocal enabledelayedexpansion
set name=dasu
for /l %%i in (0, 1, 5) do (
    set name=dasuAndroidTv 
    echo !name!
    echo %name%
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-156580c1ace9f6c6.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="set命令示例4.png"></p><p>效果：说得白一点，在 for 命令中通过 %name% 方式使用的临时变量，取的 name 这个临时变量的值会一直是它在 for 命令外赋值的内容，即使在 for 命令中通过 set 命令对这个变量又重新赋值，也不会生效。</p><p>那么，如果需要在 for 命令中通过 set 命令赋值后的临时变量能够马上拿来使用，需要两个步骤，一在文件开头启用变量延迟功能，命令：<strong><code>setlocal enabledelayedexpansion</code></strong>，二在 for 命令中通过 **<code>!name!</code>**方式来使用临时变量。</p><h3 id="_3-字符串处理" tabindex="-1"><a class="header-anchor" href="#_3-字符串处理" aria-hidden="true">#</a> 3. 字符串处理</h3><h5 id="_3-1-截取" tabindex="-1"><a class="header-anchor" href="#_3-1-截取" aria-hidden="true">#</a> 3.1 截取</h5><p>**命令：<code>%key:~[start,num]%</code> **</p><p><strong>解释</strong>：当 <code>%key%</code> 中出现了 <code>:~</code>，则表示要对 key 指向的这个字符串做截取操作，截取操作支持以下几种形式：</p><ul><li>截取<strong>指定位置开始的 n 个字符串</strong>：<code>%key:~0,4%</code>，表示截取从下标 0 开始的之后 4 个字符</li><li>截取从<strong>指定位置开始的整个字符串</strong>：<code>%key:~4%</code>，表示截取从下标为 4 开始的整个字符串</li><li>截取<strong>通过倒数方式指定开始位置的整个字符串</strong>：<code>%key:~-2%</code>，表示截取从倒数第 2 个字符开始的整个字符串</li><li>截取<strong>通过倒数方式指定位置开始之后的 n 个字符串</strong>：<code>%key:-4,2%</code>，表示截取从倒数第 4 个字符开始的 2 个字符</li><li>正数倒数方式相结合：<code>%key:~2,-2%</code>，表示截取从下标 2 开始到倒数第 2 个之间的字符串</li></ul><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
rem (rem表示后面是注释的内容，类似于 java //)原始字符串
set name=dasuAndroidTv

rem 注释内容：表示截取从下标 0 开始的之后 4 个字符，输出 dasu
echo %name:~0,4%

rem 注释内容：表示截取从下标为 4 开始的整个字符串，输出 AndroidTv
echo %name:~4%  

rem 注释内容：表示截取从倒数第 2 个字符开始的整个字符串，输出 Tv
echo %name:~-2%

rem 注释内容：表示截取从倒数第 4 个字符开始的 2 个字符，输出 Android
echo %name:~4,-2%

rem 注释内容：表示截取从下标 2 开始到倒数第 2 个之间的字符串，输出 id
echo %name:~-4,2%
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-f6b658833dc648fb.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="字符串截取命令示例.png"></p><h5 id="_3-2-拼接" tabindex="-1"><a class="header-anchor" href="#_3-2-拼接" aria-hidden="true">#</a> 3.2 拼接</h5><p><strong>命令：<code>%key1%%key2%</code></strong></p><p><strong>解释</strong>：将要拼接的那个字符串直接跟在被拼接的后面即可，不需要任何拼接操作符</p><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
set name1=dasu
set name2=AndroidTv
echo %name1%%name2%  
rem 这里是注释内容：输出 dasuAndroidTv
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-72430aab40b696bb.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="字符串截取命令示例2.png"></p><h5 id="_3-3-替换" tabindex="-1"><a class="header-anchor" href="#_3-3-替换" aria-hidden="true">#</a> 3.3 替换</h5><p><strong>命令：<code>%key:被替换字符串=替换的字符串%</code></strong></p><p><strong>解释</strong>：不解释了，直接看示例，很容易明白</p><p><strong>示例</strong>：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
set name=whoAndroidTv
echo %name:who=dasu%
rem 这里是注释内容：输出 dasuAndroid
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-9e759e6969d34134.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="字符串替换命令示例.png"></p><h5 id="_3-4-文件特殊操作" tabindex="-1"><a class="header-anchor" href="#_3-4-文件特殊操作" aria-hidden="true">#</a> 3.4 文件特殊操作</h5><p>如果是在 for 命令中遍历了某个文件夹下的文件，那么此时可以通过一些特殊命令来获取这个文件的各种信息，直接看示例：</p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
for %%i in (*.txt) do (
   echo %%i
   echo %%~fi
   echo %%~di
   echo %%~pi
   echo %%~ni
   echo %%~xi
   
   echo %%~ti
   echo %%~zi
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-b2f30fecb4518db5.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="特殊命令示例.png"></p><p>解释： 在通过 for 命令遍历文件时，%%i 根据不同的 for 使用方式，内容也有所不同，具体见第 1 节。在上述这种用法下，%%i 指向了当前目录下每个文件名，完整的文件名。</p><p>那么，此时就可以通过一些特殊命令来取得文件的相关信息，比如：</p><ul><li><strong>%%~fi</strong>：表示获取该文件的绝对路径信息</li><li><strong>%%~di</strong>：表示获取该文件所在的盘符</li><li><strong>%%~pi</strong>：表示获取该文件的路径，不包含盘符的信息</li><li><strong>%%~ni</strong>：表示获取该文件的文件名，不包含扩展名信息</li><li><strong>%%~xi</strong>：表示获取该文件的扩展名</li><li><strong>%%~ti</strong>：表示获取该文件的上次修改时间</li><li><strong>%%~zi</strong>：表示获取该文件的大小</li></ul><h3 id="_4-完整示例" tabindex="-1"><a class="header-anchor" href="#_4-完整示例" aria-hidden="true">#</a> 4. 完整示例</h3><p>最后，我们来个具体场景，将本篇所学的知识用上一遍，巩固一下。</p><p>场景：遍历指定路径目录下的所有 apk 文件，并通过一个 sign.jar 文件，分别对每个 apk 文件执行 java 命令来进行签名工作，sign.jar 接收两个参数，一个是需要签名的 apk，另外一个为输出的 apk，要求签名后的 apk 命名方式为将原文件名中的 unsign 替换成 google，并输出在跟 apk 同一个目录内即可。</p><p><img src="https://upload-images.jianshu.io/upload_images/1924341-a19e2d07e083c304.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="完整示例.png"></p><p>apk 路径：c:\\users\\suxq\\desktop\\outputs</p><p>sign.jar 路径：c:\\users\\suxq\\desktop</p><p>java 签名命令示例(要求 sign.jar 和 apk 文件都在同一路径下，即可用如下命令)：</p><p><code>java -jar sign.jar meizi_1_3_0_debug_unsign.apk meizi_1_3_0_debug_google.apk</code></p><p><strong>批处理脚本代码：</strong></p><div class="language-bash line-numbers-mode" data-ext="sh"><pre class="language-bash"><code>@echo off
setlocal enabledelayedexpansion

set sign=c:\\users\\suxq\\desktop\\sign.jar
set apkPath=c:\\users\\suxq\\desktop\\outputs\\

for %%i in (%apkPath%*.apk) do (
    set oldApk=%%~nxi
    set outApk=!oldApk:unsign=google!
    echo java -jar %sign% !oldApk! !outApk!
    rem 这里是注释内容：由于 apk 文件 和 sign.jar 文件都是虚拟的，因此真正执行时会报错，这里就只是将 java 整句命令输出，从整句命令就可以确认是否会正确执行，如果这些文件都是真的话。真的脚本应该将 echo 去掉
)
</code></pre><div class="line-numbers" aria-hidden="true"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><img src="https://upload-images.jianshu.io/upload_images/1924341-b267d226fbc883ab.png?imageMogr2/auto-orient/strip|imageView2/2/w/1240" alt="完整示例2.png"></p><p>效果：完美~</p><p>首先，遍历指定目录下的文件达到了，而且可以对文件名字符串进行处理，替换其中一些值，最后，可以根据指定位置的 sign.jar 文件，通过 java 命令来执行签名工作。</p><p>这个场景，刚好把我们今天学的关于批处理的遍历文件夹操作、临时变量使用、字符串的处理三者都包括在内，感兴趣的也去试试看吧~</p>`,109),o=[d];function r(l,c){return i(),a("div",null,o)}const p=e(s,[["render",r],["__file","脚本篇（上）---批处理脚本.html.vue"]]);export{p as default};
